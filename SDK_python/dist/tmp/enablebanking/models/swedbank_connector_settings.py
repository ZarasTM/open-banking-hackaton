'\n    enable:Banking SDK\n\n    Currently enable:Banking SDK consists of [authorization](#auth-api), [account information](#aisp-api) and [payment initiation](#pisp-api) APIs. The same calls and data structures are used for interacting with different banks. In order to use each of the APIs corresponding API instance needs to be created with bank specific settings.  enable:Banking SDK API is based on [STET PSD2 specification](https://www.stet.eu/en/psd2/).  This API intends to provide an interface for Third Party Providers (TPP) for accessing Account Servicing Payment Service Providers (ASPSP, i.e. banks).  TPP may act as Account Information Service Provider (AISP), Payment Initiation Service Providers (PISP) or both.  The Payment Service User (PSU) is the owner of the accounts held by the ASPSP and gives accreditations to the TPP in order to access his accounts information or initiates payment from these accounts.   # noqa: E501\n\n    API version: 0.3.0\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_H='psu_user_agent'
_G='psu_ip_address'
_F='tpp_redirect_uri'
_E='client_secret'
_D='client_id'
_C='country'
_B='str'
_A=None
import pprint,re,six
from enablebanking.models.connector_settings import ConnectorSettings
class SwedbankConnectorSettings(ConnectorSettings):
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_D:_B,_E:_B,_C:_B,_F:_B,_G:_B,_H:_B};attribute_map={_D:'clientId',_E:'clientSecret',_C:_C,_F:'tppRedirectUri',_G:'psuIpAddress',_H:'psuUserAgent'}
	def __init__(A,client_id=_A,client_secret=_A,country=_A,tpp_redirect_uri=_A,psu_ip_address=_A,psu_user_agent=_A):
		'SwedbankConnectorSettings - a model defined in Swagger';D=psu_user_agent;C=psu_ip_address;B=tpp_redirect_uri;A._client_id=_A;A._client_secret=_A;A._country=_A;A._tpp_redirect_uri=_A;A._psu_ip_address=_A;A._psu_user_agent=_A;A.discriminator=_A;A.client_id=client_id;A.client_secret=client_secret;A.country=country
		if B is not _A:A.tpp_redirect_uri=B
		if C is not _A:A.psu_ip_address=C
		if D is not _A:A.psu_user_agent=D
	@property
	def client_id(self):'Gets the client_id of this SwedbankConnectorSettings.  # noqa: E501\n\n          # noqa: E501\n\n        :return: The client_id of this SwedbankConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._client_id
	@client_id.setter
	def client_id(self,client_id):
		'Sets the client_id of this SwedbankConnectorSettings.\n\n          # noqa: E501\n\n        :param client_id: The client_id of this SwedbankConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=client_id
		if A is _A:raise ValueError('Invalid value for `client_id`, must not be `None`')
		self._client_id=A
	@property
	def client_secret(self):'Gets the client_secret of this SwedbankConnectorSettings.  # noqa: E501\n\n          # noqa: E501\n\n        :return: The client_secret of this SwedbankConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._client_secret
	@client_secret.setter
	def client_secret(self,client_secret):
		'Sets the client_secret of this SwedbankConnectorSettings.\n\n          # noqa: E501\n\n        :param client_secret: The client_secret of this SwedbankConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=client_secret
		if A is _A:raise ValueError('Invalid value for `client_secret`, must not be `None`')
		self._client_secret=A
	@property
	def country(self):'Gets the country of this SwedbankConnectorSettings.  # noqa: E501\n\n          # noqa: E501\n\n        :return: The country of this SwedbankConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._country
	@country.setter
	def country(self,country):
		'Sets the country of this SwedbankConnectorSettings.\n\n          # noqa: E501\n\n        :param country: The country of this SwedbankConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=country
		if A is _A:raise ValueError('Invalid value for `country`, must not be `None`')
		self._country=A
	@property
	def tpp_redirect_uri(self):'Gets the tpp_redirect_uri of this SwedbankConnectorSettings.  # noqa: E501\n\n          # noqa: E501\n\n        :return: The tpp_redirect_uri of this SwedbankConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._tpp_redirect_uri
	@tpp_redirect_uri.setter
	def tpp_redirect_uri(self,tpp_redirect_uri):'Sets the tpp_redirect_uri of this SwedbankConnectorSettings.\n\n          # noqa: E501\n\n        :param tpp_redirect_uri: The tpp_redirect_uri of this SwedbankConnectorSettings.  # noqa: E501\n        :type: str\n        ';self._tpp_redirect_uri=tpp_redirect_uri
	@property
	def psu_ip_address(self):'Gets the psu_ip_address of this SwedbankConnectorSettings.  # noqa: E501\n\n          # noqa: E501\n\n        :return: The psu_ip_address of this SwedbankConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._psu_ip_address
	@psu_ip_address.setter
	def psu_ip_address(self,psu_ip_address):'Sets the psu_ip_address of this SwedbankConnectorSettings.\n\n          # noqa: E501\n\n        :param psu_ip_address: The psu_ip_address of this SwedbankConnectorSettings.  # noqa: E501\n        :type: str\n        ';self._psu_ip_address=psu_ip_address
	@property
	def psu_user_agent(self):'Gets the psu_user_agent of this SwedbankConnectorSettings.  # noqa: E501\n\n          # noqa: E501\n\n        :return: The psu_user_agent of this SwedbankConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._psu_user_agent
	@psu_user_agent.setter
	def psu_user_agent(self,psu_user_agent):'Sets the psu_user_agent of this SwedbankConnectorSettings.\n\n          # noqa: E501\n\n        :param psu_user_agent: The psu_user_agent of this SwedbankConnectorSettings.  # noqa: E501\n        :type: str\n        ';self._psu_user_agent=psu_user_agent
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in six.iteritems(D.swagger_types):
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(SwedbankConnectorSettings,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,SwedbankConnectorSettings):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other