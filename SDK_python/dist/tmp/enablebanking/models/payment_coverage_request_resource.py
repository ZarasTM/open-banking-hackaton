'\n    enable:Banking SDK\n\n    Currently enable:Banking SDK consists of [authorization](#auth-api), [account information](#aisp-api) and [payment initiation](#pisp-api) APIs. The same calls and data structures are used for interacting with different banks. In order to use each of the APIs corresponding API instance needs to be created with bank specific settings.  enable:Banking SDK API is based on [STET PSD2 specification](https://www.stet.eu/en/psd2/).  This API intends to provide an interface for Third Party Providers (TPP) for accessing Account Servicing Payment Service Providers (ASPSP, i.e. banks).  TPP may act as Account Information Service Provider (AISP), Payment Initiation Service Providers (PISP) or both.  The Payment Service User (PSU) is the owner of the accounts held by the ASPSP and gives accreditations to the TPP in order to access his accounts information or initiates payment from these accounts.   # noqa: E501\n\n    API version: 0.3.0\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_F='str'
_E='account_id'
_D='instructed_amount'
_C='payment_coverage_request_id'
_B='payee'
_A=None
import pprint,re,six
from enablebanking.models.account_identification import AccountIdentification
from enablebanking.models.amount_type import AmountType
class PaymentCoverageRequestResource:
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_C:_F,_B:_F,_D:'AmountType',_E:'AccountIdentification'};attribute_map={_C:'paymentCoverageRequestId',_B:_B,_D:'instructedAmount',_E:'accountId'}
	def __init__(A,payment_coverage_request_id=_A,payee=_A,instructed_amount=_A,account_id=_A):
		'PaymentCoverageRequestResource - a model defined in Swagger';B=payee;A._payment_coverage_request_id=_A;A._payee=_A;A._instructed_amount=_A;A._account_id=_A;A.discriminator=_A;A.payment_coverage_request_id=payment_coverage_request_id
		if B is not _A:A.payee=B
		A.instructed_amount=instructed_amount;A.account_id=account_id
	@property
	def payment_coverage_request_id(self):'Gets the payment_coverage_request_id of this PaymentCoverageRequestResource.  # noqa: E501\n\n        Identification of the payment Coverage Request  # noqa: E501\n\n        :return: The payment_coverage_request_id of this PaymentCoverageRequestResource.  # noqa: E501\n        :rtype: str\n        ';return self._payment_coverage_request_id
	@payment_coverage_request_id.setter
	def payment_coverage_request_id(self,payment_coverage_request_id):
		'Sets the payment_coverage_request_id of this PaymentCoverageRequestResource.\n\n        Identification of the payment Coverage Request  # noqa: E501\n\n        :param payment_coverage_request_id: The payment_coverage_request_id of this PaymentCoverageRequestResource.  # noqa: E501\n        :type: str\n        ';A=payment_coverage_request_id
		if A is _A:raise ValueError('Invalid value for `payment_coverage_request_id`, must not be `None`')
		if A is not _A and len(A)>35:raise ValueError('Invalid value for `payment_coverage_request_id`, length must be less than or equal to `35`')
		self._payment_coverage_request_id=A
	@property
	def payee(self):'Gets the payee of this PaymentCoverageRequestResource.  # noqa: E501\n\n        The merchant where the card is accepted as information to the PSU.  # noqa: E501\n\n        :return: The payee of this PaymentCoverageRequestResource.  # noqa: E501\n        :rtype: str\n        ';return self._payee
	@payee.setter
	def payee(self,payee):
		'Sets the payee of this PaymentCoverageRequestResource.\n\n        The merchant where the card is accepted as information to the PSU.  # noqa: E501\n\n        :param payee: The payee of this PaymentCoverageRequestResource.  # noqa: E501\n        :type: str\n        ';A=payee
		if A is not _A and len(A)>70:raise ValueError('Invalid value for `payee`, length must be less than or equal to `70`')
		self._payee=A
	@property
	def instructed_amount(self):'Gets the instructed_amount of this PaymentCoverageRequestResource.  # noqa: E501\n\n\n        :return: The instructed_amount of this PaymentCoverageRequestResource.  # noqa: E501\n        :rtype: AmountType\n        ';return self._instructed_amount
	@instructed_amount.setter
	def instructed_amount(self,instructed_amount):
		'Sets the instructed_amount of this PaymentCoverageRequestResource.\n\n\n        :param instructed_amount: The instructed_amount of this PaymentCoverageRequestResource.  # noqa: E501\n        :type: AmountType\n        ';A=instructed_amount
		if A is _A:raise ValueError('Invalid value for `instructed_amount`, must not be `None`')
		self._instructed_amount=A
	@property
	def account_id(self):'Gets the account_id of this PaymentCoverageRequestResource.  # noqa: E501\n\n\n        :return: The account_id of this PaymentCoverageRequestResource.  # noqa: E501\n        :rtype: AccountIdentification\n        ';return self._account_id
	@account_id.setter
	def account_id(self,account_id):
		'Sets the account_id of this PaymentCoverageRequestResource.\n\n\n        :param account_id: The account_id of this PaymentCoverageRequestResource.  # noqa: E501\n        :type: AccountIdentification\n        ';A=account_id
		if A is _A:raise ValueError('Invalid value for `account_id`, must not be `None`')
		self._account_id=A
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in six.iteritems(D.swagger_types):
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(PaymentCoverageRequestResource,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,PaymentCoverageRequestResource):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other