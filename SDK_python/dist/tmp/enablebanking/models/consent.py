'\n    enable:Banking SDK\n\n    Currently enable:Banking SDK consists of [authorization](#auth-api), [account information](#aisp-api) and [payment initiation](#pisp-api) APIs. The same calls and data structures are used for interacting with different banks. In order to use each of the APIs corresponding API instance needs to be created with bank specific settings.  enable:Banking SDK API is based on [STET PSD2 specification](https://www.stet.eu/en/psd2/).  This API intends to provide an interface for Third Party Providers (TPP) for accessing Account Servicing Payment Service Providers (ASPSP, i.e. banks).  TPP may act as Account Information Service Provider (AISP), Payment Initiation Service Providers (PISP) or both.  The Payment Service User (PSU) is the owner of the accounts held by the ASPSP and gives accreditations to the TPP in order to access his accounts information or initiates payment from these accounts.   # noqa: E501\n\n    API version: 0.3.0\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_E='str'
_D='links'
_C='consent_id'
_B='consent_status'
_A=None
import pprint,re,six
from enablebanking.models.consent_links import ConsentLinks
class Consent:
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_B:_E,_C:_E,_D:'ConsentLinks'};attribute_map={_B:'consentStatus',_C:'consentId',_D:'_links'}
	def __init__(A,consent_status=_A,consent_id=_A,links=_A):
		'Consent - a model defined in Swagger';D=links;C=consent_id;B=consent_status;A._consent_status=_A;A._consent_id=_A;A._links=_A;A.discriminator=_A
		if B is not _A:A.consent_status=B
		if C is not _A:A.consent_id=C
		if D is not _A:A.links=D
	@property
	def consent_status(self):'Gets the consent_status of this Consent.  # noqa: E501\n\n\n        :return: The consent_status of this Consent.  # noqa: E501\n        :rtype: str\n        ';return self._consent_status
	@consent_status.setter
	def consent_status(self,consent_status):'Sets the consent_status of this Consent.\n\n\n        :param consent_status: The consent_status of this Consent.  # noqa: E501\n        :type: str\n        ';self._consent_status=consent_status
	@property
	def consent_id(self):'Gets the consent_id of this Consent.  # noqa: E501\n\n\n        :return: The consent_id of this Consent.  # noqa: E501\n        :rtype: str\n        ';return self._consent_id
	@consent_id.setter
	def consent_id(self,consent_id):'Sets the consent_id of this Consent.\n\n\n        :param consent_id: The consent_id of this Consent.  # noqa: E501\n        :type: str\n        ';self._consent_id=consent_id
	@property
	def links(self):'Gets the links of this Consent.  # noqa: E501\n\n\n        :return: The links of this Consent.  # noqa: E501\n        :rtype: ConsentLinks\n        ';return self._links
	@links.setter
	def links(self,links):'Sets the links of this Consent.\n\n\n        :param links: The links of this Consent.  # noqa: E501\n        :type: ConsentLinks\n        ';self._links=links
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in six.iteritems(D.swagger_types):
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(Consent,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,Consent):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other