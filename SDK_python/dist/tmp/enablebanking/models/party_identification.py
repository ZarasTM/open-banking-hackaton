'\n    enable:Banking SDK\n\n    Currently enable:Banking SDK consists of [authorization](#auth-api), [account information](#aisp-api) and [payment initiation](#pisp-api) APIs. The same calls and data structures are used for interacting with different banks. In order to use each of the APIs corresponding API instance needs to be created with bank specific settings.  enable:Banking SDK API is based on [STET PSD2 specification](https://www.stet.eu/en/psd2/).  This API intends to provide an interface for Third Party Providers (TPP) for accessing Account Servicing Payment Service Providers (ASPSP, i.e. banks).  TPP may act as Account Information Service Provider (AISP), Payment Initiation Service Providers (PISP) or both.  The Payment Service User (PSU) is the owner of the accounts held by the ASPSP and gives accreditations to the TPP in order to access his accounts information or initiates payment from these accounts.   # noqa: E501\n\n    API version: 0.3.0\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_F='GenericIdentification'
_E='private_id'
_D='organisation_id'
_C='postal_address'
_B='name'
_A=None
import pprint,re,six
from enablebanking.models.generic_identification import GenericIdentification
from enablebanking.models.postal_address import PostalAddress
class PartyIdentification:
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_B:'str',_C:'PostalAddress',_D:_F,_E:_F};attribute_map={_B:_B,_C:'postalAddress',_D:'organisationId',_E:'privateId'}
	def __init__(A,name=_A,postal_address=_A,organisation_id=_A,private_id=_A):
		'PartyIdentification - a model defined in Swagger';D=private_id;C=organisation_id;B=postal_address;A._name=_A;A._postal_address=_A;A._organisation_id=_A;A._private_id=_A;A.discriminator=_A;A.name=name
		if B is not _A:A.postal_address=B
		if C is not _A:A.organisation_id=C
		if D is not _A:A.private_id=D
	@property
	def name(self):'Gets the name of this PartyIdentification.  # noqa: E501\n\n        ISO20022: Name by which a party is known and which is usually used to identify that party.   # noqa: E501\n\n        :return: The name of this PartyIdentification.  # noqa: E501\n        :rtype: str\n        ';return self._name
	@name.setter
	def name(self,name):
		'Sets the name of this PartyIdentification.\n\n        ISO20022: Name by which a party is known and which is usually used to identify that party.   # noqa: E501\n\n        :param name: The name of this PartyIdentification.  # noqa: E501\n        :type: str\n        ';A=name
		if A is _A:raise ValueError('Invalid value for `name`, must not be `None`')
		if A is not _A and len(A)>140:raise ValueError('Invalid value for `name`, length must be less than or equal to `140`')
		self._name=A
	@property
	def postal_address(self):'Gets the postal_address of this PartyIdentification.  # noqa: E501\n\n\n        :return: The postal_address of this PartyIdentification.  # noqa: E501\n        :rtype: PostalAddress\n        ';return self._postal_address
	@postal_address.setter
	def postal_address(self,postal_address):'Sets the postal_address of this PartyIdentification.\n\n\n        :param postal_address: The postal_address of this PartyIdentification.  # noqa: E501\n        :type: PostalAddress\n        ';self._postal_address=postal_address
	@property
	def organisation_id(self):'Gets the organisation_id of this PartyIdentification.  # noqa: E501\n\n        Unique and unambiguous way to identify an organisation.  # noqa: E501\n\n        :return: The organisation_id of this PartyIdentification.  # noqa: E501\n        :rtype: GenericIdentification\n        ';return self._organisation_id
	@organisation_id.setter
	def organisation_id(self,organisation_id):'Sets the organisation_id of this PartyIdentification.\n\n        Unique and unambiguous way to identify an organisation.  # noqa: E501\n\n        :param organisation_id: The organisation_id of this PartyIdentification.  # noqa: E501\n        :type: GenericIdentification\n        ';self._organisation_id=organisation_id
	@property
	def private_id(self):'Gets the private_id of this PartyIdentification.  # noqa: E501\n\n        Unique and unambiguous identification of a person.  # noqa: E501\n\n        :return: The private_id of this PartyIdentification.  # noqa: E501\n        :rtype: GenericIdentification\n        ';return self._private_id
	@private_id.setter
	def private_id(self,private_id):'Sets the private_id of this PartyIdentification.\n\n        Unique and unambiguous identification of a person.  # noqa: E501\n\n        :param private_id: The private_id of this PartyIdentification.  # noqa: E501\n        :type: GenericIdentification\n        ';self._private_id=private_id
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in six.iteritems(D.swagger_types):
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(PartyIdentification,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,PartyIdentification):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other