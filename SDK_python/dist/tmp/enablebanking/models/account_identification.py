'\n    enable:Banking SDK\n\n    Currently enable:Banking SDK consists of [authorization](#auth-api), [account information](#aisp-api) and [payment initiation](#pisp-api) APIs. The same calls and data structures are used for interacting with different banks. In order to use each of the APIs corresponding API instance needs to be created with bank specific settings.  enable:Banking SDK API is based on [STET PSD2 specification](https://www.stet.eu/en/psd2/).  This API intends to provide an interface for Third Party Providers (TPP) for accessing Account Servicing Payment Service Providers (ASPSP, i.e. banks).  TPP may act as Account Information Service Provider (AISP), Payment Initiation Service Providers (PISP) or both.  The Payment Service User (PSU) is the owner of the accounts held by the ASPSP and gives accreditations to the TPP in order to access his accounts information or initiates payment from these accounts.   # noqa: E501\n\n    API version: 0.3.0\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_C='other'
_B='iban'
_A=None
import pprint,re,six
from enablebanking.models.generic_identification import GenericIdentification
class AccountIdentification:
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_B:'str',_C:'GenericIdentification'};attribute_map={_B:_B,_C:_C}
	def __init__(A,iban=_A,other=_A):
		'AccountIdentification - a model defined in Swagger';B=other;A._iban=_A;A._other=_A;A.discriminator=_A
		if iban is not _A:A.iban=iban
		if B is not _A:A.other=B
	@property
	def iban(self):'Gets the iban of this AccountIdentification.  # noqa: E501\n\n        ISO20022: International Bank Account Number (IBAN) - identification used internationally by financial institutions to uniquely identify the account of a customer.  Further specifications of the format and content of the IBAN can be found in the standard ISO 13616 "Banking and related financial services - International Bank Account Number (IBAN)" version 1997-10-01, or later revisions.   # noqa: E501\n\n        :return: The iban of this AccountIdentification.  # noqa: E501\n        :rtype: str\n        ';return self._iban
	@iban.setter
	def iban(self,iban):
		'Sets the iban of this AccountIdentification.\n\n        ISO20022: International Bank Account Number (IBAN) - identification used internationally by financial institutions to uniquely identify the account of a customer.  Further specifications of the format and content of the IBAN can be found in the standard ISO 13616 "Banking and related financial services - International Bank Account Number (IBAN)" version 1997-10-01, or later revisions.   # noqa: E501\n\n        :param iban: The iban of this AccountIdentification.  # noqa: E501\n        :type: str\n        ';A=iban
		if A is not _A and not re.search('^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}$',A):raise ValueError('Invalid value for `iban`, must be a follow pattern or equal to `/^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}$/`')
		self._iban=A
	@property
	def other(self):'Gets the other of this AccountIdentification.  # noqa: E501\n\n\n        :return: The other of this AccountIdentification.  # noqa: E501\n        :rtype: GenericIdentification\n        ';return self._other
	@other.setter
	def other(self,other):'Sets the other of this AccountIdentification.\n\n\n        :param other: The other of this AccountIdentification.  # noqa: E501\n        :type: GenericIdentification\n        ';self._other=other
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in six.iteritems(D.swagger_types):
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(AccountIdentification,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,AccountIdentification):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other