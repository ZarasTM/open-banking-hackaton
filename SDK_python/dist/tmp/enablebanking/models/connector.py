'\n    enable:Banking SDK\n\n    Currently enable:Banking SDK consists of [authorization](#auth-api), [account information](#aisp-api) and [payment initiation](#pisp-api) APIs. The same calls and data structures are used for interacting with different banks. In order to use each of the APIs corresponding API instance needs to be created with bank specific settings.  enable:Banking SDK API is based on [STET PSD2 specification](https://www.stet.eu/en/psd2/).  This API intends to provide an interface for Third Party Providers (TPP) for accessing Account Servicing Payment Service Providers (ASPSP, i.e. banks).  TPP may act as Account Information Service Provider (AISP), Payment Initiation Service Providers (PISP) or both.  The Payment Service User (PSU) is the owner of the accounts held by the ASPSP and gives accreditations to the TPP in order to access his accounts information or initiates payment from these accounts.   # noqa: E501\n\n    API version: 0.3.0\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_E='list[str]'
_D='scopes'
_C='countries'
_B='name'
_A=None
import pprint,re,six
class Connector:
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_B:'str',_C:_E,_D:_E};attribute_map={_B:_B,_C:_C,_D:_D}
	def __init__(A,name=_A,countries=_A,scopes=_A):
		'Connector - a model defined in Swagger';C=scopes;B=countries;A._name=_A;A._countries=_A;A._scopes=_A;A.discriminator=_A
		if name is not _A:A.name=name
		if B is not _A:A.countries=B
		if C is not _A:A.scopes=C
	@property
	def name(self):'Gets the name of this Connector.  # noqa: E501\n\n        The name of connector  # noqa: E501\n\n        :return: The name of this Connector.  # noqa: E501\n        :rtype: str\n        ';return self._name
	@name.setter
	def name(self,name):'Sets the name of this Connector.\n\n        The name of connector  # noqa: E501\n\n        :param name: The name of this Connector.  # noqa: E501\n        :type: str\n        ';self._name=name
	@property
	def countries(self):'Gets the countries of this Connector.  # noqa: E501\n\n        The list of all countries supported by connector  # noqa: E501\n\n        :return: The countries of this Connector.  # noqa: E501\n        :rtype: list[str]\n        ';return self._countries
	@countries.setter
	def countries(self,countries):'Sets the countries of this Connector.\n\n        The list of all countries supported by connector  # noqa: E501\n\n        :param countries: The countries of this Connector.  # noqa: E501\n        :type: list[str]\n        ';self._countries=countries
	@property
	def scopes(self):'Gets the scopes of this Connector.  # noqa: E501\n\n        The list of all scopes supported by connector  # noqa: E501\n\n        :return: The scopes of this Connector.  # noqa: E501\n        :rtype: list[str]\n        ';return self._scopes
	@scopes.setter
	def scopes(self,scopes):'Sets the scopes of this Connector.\n\n        The list of all scopes supported by connector  # noqa: E501\n\n        :param scopes: The scopes of this Connector.  # noqa: E501\n        :type: list[str]\n        ';self._scopes=scopes
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in six.iteritems(D.swagger_types):
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(Connector,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,Connector):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other