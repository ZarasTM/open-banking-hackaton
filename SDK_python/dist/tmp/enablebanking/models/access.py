'\n    enable:Banking SDK\n\n    Currently enable:Banking SDK consists of [authorization](#auth-api), [account information](#aisp-api) and [payment initiation](#pisp-api) APIs. The same calls and data structures are used for interacting with different banks. In order to use each of the APIs corresponding API instance needs to be created with bank specific settings.  enable:Banking SDK API is based on [STET PSD2 specification](https://www.stet.eu/en/psd2/).  This API intends to provide an interface for Third Party Providers (TPP) for accessing Account Servicing Payment Service Providers (ASPSP, i.e. banks).  TPP may act as Account Information Service Provider (AISP), Payment Initiation Service Providers (PISP) or both.  The Payment Service User (PSU) is the owner of the accounts held by the ASPSP and gives accreditations to the TPP in order to access his accounts information or initiates payment from these accounts.   # noqa: E501\n\n    API version: 0.3.0\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_L='valid_until'
_K='frequency_per_day'
_J='recurring_indicator'
_I='account_details'
_H='psu_identity'
_G='trusted_beneficiaries'
_F='transactions'
_E='balances'
_D='accounts'
_C=False
_B='bool'
_A=None
import pprint,re,six
from enablebanking.models.account_identification import AccountIdentification
from enablebanking.models.balances_access import BalancesAccess
from enablebanking.models.transactions_access import TransactionsAccess
class Access:
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_D:'list[AccountIdentification]',_E:'BalancesAccess',_F:'TransactionsAccess',_G:_B,_H:_B,_I:_B,_J:_B,_K:'int',_L:'date'};attribute_map={_D:_D,_E:_E,_F:_F,_G:'trustedBeneficiaries',_H:'psuIdentity',_I:'accountDetails',_J:'recurringIndicator',_K:'frequencyPerDay',_L:'validUntil'}
	def __init__(A,accounts=_A,balances=_A,transactions=_A,trusted_beneficiaries=_C,psu_identity=_C,account_details=_C,recurring_indicator=True,frequency_per_day=_A,valid_until=_A):
		'Access - a model defined in Swagger';J=valid_until;I=frequency_per_day;H=recurring_indicator;G=account_details;F=psu_identity;E=trusted_beneficiaries;D=transactions;C=balances;B=accounts;A._accounts=_A;A._balances=_A;A._transactions=_A;A._trusted_beneficiaries=_A;A._psu_identity=_A;A._account_details=_A;A._recurring_indicator=_A;A._frequency_per_day=_A;A._valid_until=_A;A.discriminator=_A
		if B is not _A:A.accounts=B
		if C is not _A:A.balances=C
		if D is not _A:A.transactions=D
		if E is not _A:A.trusted_beneficiaries=E
		if F is not _A:A.psu_identity=F
		if G is not _A:A.account_details=G
		if H is not _A:A.recurring_indicator=H
		if I is not _A:A.frequency_per_day=I
		if J is not _A:A.valid_until=J
	@property
	def accounts(self):'Gets the accounts of this Access.  # noqa: E501\n\n        List of accounts access to which is requested. If not set behaviour depends on the bank: some banks allow users to choose list of accessible accounts through their access consent UI, while other may provide access to all accounts or just access to the list of accounts.   # noqa: E501\n\n        :return: The accounts of this Access.  # noqa: E501\n        :rtype: list[AccountIdentification]\n        ';return self._accounts
	@accounts.setter
	def accounts(self,accounts):'Sets the accounts of this Access.\n\n        List of accounts access to which is requested. If not set behaviour depends on the bank: some banks allow users to choose list of accessible accounts through their access consent UI, while other may provide access to all accounts or just access to the list of accounts.   # noqa: E501\n\n        :param accounts: The accounts of this Access.  # noqa: E501\n        :type: list[AccountIdentification]\n        ';self._accounts=accounts
	@property
	def balances(self):'Gets the balances of this Access.  # noqa: E501\n\n        Defines how balance information is going to be accessed. If not set balances are not explicitly requested  # noqa: E501\n\n        :return: The balances of this Access.  # noqa: E501\n        :rtype: BalancesAccess\n        ';return self._balances
	@balances.setter
	def balances(self,balances):'Sets the balances of this Access.\n\n        Defines how balance information is going to be accessed. If not set balances are not explicitly requested  # noqa: E501\n\n        :param balances: The balances of this Access.  # noqa: E501\n        :type: BalancesAccess\n        ';self._balances=balances
	@property
	def transactions(self):'Gets the transactions of this Access.  # noqa: E501\n\n        Defines how transactions are going to be accessed. If not set transactions are not explicitly requested  # noqa: E501\n\n        :return: The transactions of this Access.  # noqa: E501\n        :rtype: TransactionsAccess\n        ';return self._transactions
	@transactions.setter
	def transactions(self,transactions):'Sets the transactions of this Access.\n\n        Defines how transactions are going to be accessed. If not set transactions are not explicitly requested  # noqa: E501\n\n        :param transactions: The transactions of this Access.  # noqa: E501\n        :type: TransactionsAccess\n        ';self._transactions=transactions
	@property
	def trusted_beneficiaries(self):'Gets the trusted_beneficiaries of this Access.  # noqa: E501\n\n        Indicator that access to the trusted beneficiaries list was granted or not to the AISP by the PSU - true: the access was granted - false: the access was not granted   # noqa: E501\n\n        :return: The trusted_beneficiaries of this Access.  # noqa: E501\n        :rtype: bool\n        ';return self._trusted_beneficiaries
	@trusted_beneficiaries.setter
	def trusted_beneficiaries(self,trusted_beneficiaries):'Sets the trusted_beneficiaries of this Access.\n\n        Indicator that access to the trusted beneficiaries list was granted or not to the AISP by the PSU - true: the access was granted - false: the access was not granted   # noqa: E501\n\n        :param trusted_beneficiaries: The trusted_beneficiaries of this Access.  # noqa: E501\n        :type: bool\n        ';self._trusted_beneficiaries=trusted_beneficiaries
	@property
	def psu_identity(self):'Gets the psu_identity of this Access.  # noqa: E501\n\n        Indicator that access to the PSU identity, first name and last name, was granted or not to the AISP by the PSU - true: the access was granted - false: the access was not granted   # noqa: E501\n\n        :return: The psu_identity of this Access.  # noqa: E501\n        :rtype: bool\n        ';return self._psu_identity
	@psu_identity.setter
	def psu_identity(self,psu_identity):'Sets the psu_identity of this Access.\n\n        Indicator that access to the PSU identity, first name and last name, was granted or not to the AISP by the PSU - true: the access was granted - false: the access was not granted   # noqa: E501\n\n        :param psu_identity: The psu_identity of this Access.  # noqa: E501\n        :type: bool\n        ';self._psu_identity=psu_identity
	@property
	def account_details(self):'Gets the account_details of this Access.  # noqa: E501\n\n        Indicates if access to account details if explicitly requested  # noqa: E501\n\n        :return: The account_details of this Access.  # noqa: E501\n        :rtype: bool\n        ';return self._account_details
	@account_details.setter
	def account_details(self,account_details):'Sets the account_details of this Access.\n\n        Indicates if access to account details if explicitly requested  # noqa: E501\n\n        :param account_details: The account_details of this Access.  # noqa: E501\n        :type: bool\n        ';self._account_details=account_details
	@property
	def recurring_indicator(self):'Gets the recurring_indicator of this Access.  # noqa: E501\n\n        - true: the consent is for recurring access to the account data. - false: the consent is for one access to the account data.   # noqa: E501\n\n        :return: The recurring_indicator of this Access.  # noqa: E501\n        :rtype: bool\n        ';return self._recurring_indicator
	@recurring_indicator.setter
	def recurring_indicator(self,recurring_indicator):'Sets the recurring_indicator of this Access.\n\n        - true: the consent is for recurring access to the account data. - false: the consent is for one access to the account data.   # noqa: E501\n\n        :param recurring_indicator: The recurring_indicator of this Access.  # noqa: E501\n        :type: bool\n        ';self._recurring_indicator=recurring_indicator
	@property
	def frequency_per_day(self):'Gets the frequency_per_day of this Access.  # noqa: E501\n\n        This field indicates the requested maximum frequency for an access without PSU involvement per day. For a one-off access, this attribute is set to "1". The frequency needs to be greater equal to one.   # noqa: E501\n\n        :return: The frequency_per_day of this Access.  # noqa: E501\n        :rtype: int\n        ';return self._frequency_per_day
	@frequency_per_day.setter
	def frequency_per_day(self,frequency_per_day):
		'Sets the frequency_per_day of this Access.\n\n        This field indicates the requested maximum frequency for an access without PSU involvement per day. For a one-off access, this attribute is set to "1". The frequency needs to be greater equal to one.   # noqa: E501\n\n        :param frequency_per_day: The frequency_per_day of this Access.  # noqa: E501\n        :type: int\n        ';A=frequency_per_day
		if A is not _A and A<1:raise ValueError('Invalid value for `frequency_per_day`, must be a value greater than or equal to `1`')
		self._frequency_per_day=A
	@property
	def valid_until(self):'Gets the valid_until of this Access.  # noqa: E501\n\n        This parameter is requesting a valid until date for the requested consent. The content is the local ASPSP date in ISO-Date Format, e.g. 2017-10-30. Future dates might get adjusted by ASPSP.   # noqa: E501\n\n        :return: The valid_until of this Access.  # noqa: E501\n        :rtype: date\n        ';return self._valid_until
	@valid_until.setter
	def valid_until(self,valid_until):'Sets the valid_until of this Access.\n\n        This parameter is requesting a valid until date for the requested consent. The content is the local ASPSP date in ISO-Date Format, e.g. 2017-10-30. Future dates might get adjusted by ASPSP.   # noqa: E501\n\n        :param valid_until: The valid_until of this Access.  # noqa: E501\n        :type: date\n        ';self._valid_until=valid_until
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in six.iteritems(D.swagger_types):
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(Access,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,Access):return _C
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other