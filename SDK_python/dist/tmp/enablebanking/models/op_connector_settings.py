'\n    enable:Banking SDK\n\n    Currently enable:Banking SDK consists of [authorization](#auth-api), [account information](#aisp-api) and [payment initiation](#pisp-api) APIs. The same calls and data structures are used for interacting with different banks. In order to use each of the APIs corresponding API instance needs to be created with bank specific settings.  enable:Banking SDK API is based on [STET PSD2 specification](https://www.stet.eu/en/psd2/).  This API intends to provide an interface for Third Party Providers (TPP) for accessing Account Servicing Payment Service Providers (ASPSP, i.e. banks).  TPP may act as Account Information Service Provider (AISP), Payment Initiation Service Providers (PISP) or both.  The Payment Service User (PSU) is the owner of the accounts held by the ASPSP and gives accreditations to the TPP in order to access his accounts information or initiates payment from these accounts.   # noqa: E501\n\n    API version: 0.3.0\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_D='str'
_C='api_secret'
_B='api_key'
_A=None
import pprint,re,six
from enablebanking.models.connector_settings import ConnectorSettings
class OPConnectorSettings(ConnectorSettings):
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_B:_D,_C:_D};attribute_map={_B:'apiKey',_C:'apiSecret'}
	def __init__(A,api_key=_A,api_secret=_A):'OPConnectorSettings - a model defined in Swagger';A._api_key=_A;A._api_secret=_A;A.discriminator=_A;A.api_key=api_key;A.api_secret=api_secret
	@property
	def api_key(self):'Gets the api_key of this OPConnectorSettings.  # noqa: E501\n\n          # noqa: E501\n\n        :return: The api_key of this OPConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._api_key
	@api_key.setter
	def api_key(self,api_key):
		'Sets the api_key of this OPConnectorSettings.\n\n          # noqa: E501\n\n        :param api_key: The api_key of this OPConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=api_key
		if A is _A:raise ValueError('Invalid value for `api_key`, must not be `None`')
		self._api_key=A
	@property
	def api_secret(self):'Gets the api_secret of this OPConnectorSettings.  # noqa: E501\n\n          # noqa: E501\n\n        :return: The api_secret of this OPConnectorSettings.  # noqa: E501\n        :rtype: str\n        ';return self._api_secret
	@api_secret.setter
	def api_secret(self,api_secret):
		'Sets the api_secret of this OPConnectorSettings.\n\n          # noqa: E501\n\n        :param api_secret: The api_secret of this OPConnectorSettings.  # noqa: E501\n        :type: str\n        ';A=api_secret
		if A is _A:raise ValueError('Invalid value for `api_secret`, must not be `None`')
		self._api_secret=A
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in six.iteritems(D.swagger_types):
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(OPConnectorSettings,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,OPConnectorSettings):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other