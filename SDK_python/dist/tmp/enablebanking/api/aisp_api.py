'\n    enable:Banking SDK\n\n    Currently enable:Banking SDK consists of [authorization](#auth-api), [account information](#aisp-api) and [payment initiation](#pisp-api) APIs. The same calls and data structures are used for interacting with different banks. In order to use each of the APIs corresponding API instance needs to be created with bank specific settings.  enable:Banking SDK API is based on [STET PSD2 specification](https://www.stet.eu/en/psd2/).  This API intends to provide an interface for Third Party Providers (TPP) for accessing Account Servicing Payment Service Providers (ASPSP, i.e. banks).  TPP may act as Account Information Service Provider (AISP), Payment Initiation Service Providers (PISP) or both.  The Payment Service User (PSU) is the owner of the accounts held by the ASPSP and gives accreditations to the TPP in order to access his accounts information or initiates payment from these accounts.   # noqa: E501\n\n    API version: 0.3.0\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
from __future__ import absolute_import
_R='Consent'
_Q='application/json; charset=utf-8'
_P='accountResourceId'
_O="^([a-zA-Z0-9 \\/\\-?:\\()\\.,']{1,45})$"
_N='application/hal+json; charset=utf-8'
_M='GET'
_L='psuToken'
_K='application/json'
_J='Content-Type'
_I='Accept'
_H=None
_G='kwargs'
_F='_request_timeout'
_E='_preload_content'
_D=True
_C='account_resource_id'
_B='async_req'
_A='_return_http_data_only'
import re,six
from enablebanking.api_client import ApiClient
class AISPApi:
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    Ref: https://github.com/swagger-api/swagger-codegen\n    '
	def __init__(self,api_client):self.api_client=api_client
	def get_account_balances(self,account_resource_id,**kwargs):
		'Retrieval of an account balances report (AISP)  # noqa: E501\n\n        <h3>Description</h3>   This call returns a set of balances for a given PSU account that is specified by the AISP through an account resource Identification   <ul>     <li>The ASPSP must provide at least the accounting balance on the account.</li>     <li>The ASPSP can provide other balance restitutions, e.g. instant balance, as well, if possible.</li>     <li>Actually, from the PSD2 perspective, any other balances that are provided through the Web-Banking service of the ASPSP must also be provided by this ASPSP through the API.</li>   </ul> <h3>Prerequisites</h3>   <ul>     <li>The TPP has been registered by the Registration Authority for the AISP role</li>     <li>The TPP and the PSU have a contract that has been enrolled by the ASPSP     <ul style="list-style-type:circle;">       <li>At this step, the ASPSP has delivered an OAUTH2 &ldquo;Authorization Code&rdquo; or &ldquo;Resource Owner Password&rdquo; access token to the TPP (cf. &sect; 3.4.2).</li>     </ul>     </li>     <li>The TPP and the ASPSP have successfully processed a mutual check and authentication</li>     <li>The TPP has presented its OAUTH2 &ldquo;Authorization Code&rdquo; or &ldquo;Resource Owner Password&rdquo; access token which allows the ASPSP to identify the relevant PSU and retrieve the linked PSU context (cf. &sect; 3.4.2) if any.</li>     <li>The ASPSP takes into account the access token that establishes the link between the PSU and the AISP.</li>     <li>The TPP has previously retrieved the list of available accounts for the PSU</li>   </ul> <h3>Business flow</h3>   The AISP requests the ASPSP on one of the PSU&rsquo;s accounts.<br />   The ASPSP answers by providing a list of balances on this account.   <ul>     <li>The ASPSP must provide at least the accounting balance on the account.</li>     <li>The ASPSP can provide other balance restitutions, e.g. instant balance, as well, if possible.</li>     <li>Actually, from the PSD2 perspective, any other balances that are provided through the Web-Banking service of the ASPSP must also be provided by this ASPSP through the API.</li>   </ul>   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_account_balances(account_resource_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str account_resource_id: Identification of account resource to fetch (required)\n        :return: HalBalances\n                 If the method is called asynchronously,\n                 returns the request thread.\n        ';kwargs[_A]=_D
		if kwargs.get(_B):return self.get_account_balances_with_http_info(account_resource_id,**kwargs)
		else:data=self.get_account_balances_with_http_info(account_resource_id,**kwargs);return data
	def get_account_balances_with_http_info(self,account_resource_id,**kwargs):
		'Retrieval of an account balances report (AISP)  # noqa: E501\n\n        <h3>Description</h3>   This call returns a set of balances for a given PSU account that is specified by the AISP through an account resource Identification   <ul>     <li>The ASPSP must provide at least the accounting balance on the account.</li>     <li>The ASPSP can provide other balance restitutions, e.g. instant balance, as well, if possible.</li>     <li>Actually, from the PSD2 perspective, any other balances that are provided through the Web-Banking service of the ASPSP must also be provided by this ASPSP through the API.</li>   </ul> <h3>Prerequisites</h3>   <ul>     <li>The TPP has been registered by the Registration Authority for the AISP role</li>     <li>The TPP and the PSU have a contract that has been enrolled by the ASPSP     <ul style="list-style-type:circle;">       <li>At this step, the ASPSP has delivered an OAUTH2 &ldquo;Authorization Code&rdquo; or &ldquo;Resource Owner Password&rdquo; access token to the TPP (cf. &sect; 3.4.2).</li>     </ul>     </li>     <li>The TPP and the ASPSP have successfully processed a mutual check and authentication</li>     <li>The TPP has presented its OAUTH2 &ldquo;Authorization Code&rdquo; or &ldquo;Resource Owner Password&rdquo; access token which allows the ASPSP to identify the relevant PSU and retrieve the linked PSU context (cf. &sect; 3.4.2) if any.</li>     <li>The ASPSP takes into account the access token that establishes the link between the PSU and the AISP.</li>     <li>The TPP has previously retrieved the list of available accounts for the PSU</li>   </ul> <h3>Business flow</h3>   The AISP requests the ASPSP on one of the PSU&rsquo;s accounts.<br />   The ASPSP answers by providing a list of balances on this account.   <ul>     <li>The ASPSP must provide at least the accounting balance on the account.</li>     <li>The ASPSP can provide other balance restitutions, e.g. instant balance, as well, if possible.</li>     <li>Actually, from the PSD2 perspective, any other balances that are provided through the Web-Banking service of the ASPSP must also be provided by this ASPSP through the API.</li>   </ul>   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_account_balances_with_http_info(account_resource_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str account_resource_id: Identification of account resource to fetch (required)\n        :return: HalBalances\n                 If the method is called asynchronously,\n                 returns the request thread.\n        ';all_params=[_C];all_params.append(_B);all_params.append(_A);all_params.append(_E);all_params.append(_F);params=locals()
		for (key,val) in six.iteritems(params[_G]):
			if key not in all_params:raise TypeError("Got an unexpected keyword argument '%s' to method get_account_balances"%key)
			params[key]=val
		del params[_G]
		if _C not in params or params[_C]is _H:raise ValueError('Missing the required parameter `account_resource_id` when calling `get_account_balances`')
		if _C in params and not re.search(_O,params[_C]):raise ValueError("Invalid value for parameter `account_resource_id` when calling `get_account_balances`, must conform to the pattern `/^([a-zA-Z0-9 \\/\\-?:\\()\\.,']{1,45})$/`")
		collection_formats={};path_params={}
		if _C in params:path_params[_P]=params[_C]
		query_params=[];header_params={};form_params=[];local_var_files={};body_params=_H;header_params[_I]=self.api_client.select_header_accept([_N]);header_params[_J]=self.api_client.select_header_content_type([_K]);auth_settings=[_L];return self.api_client.call_api('/accounts/{accountResourceId}/balances',_M,path_params,query_params,header_params,body=body_params,post_params=form_params,files=local_var_files,response_type='HalBalances',auth_settings=auth_settings,async_req=params.get(_B),_return_http_data_only=params.get(_A),_preload_content=params.get(_E,_D),_request_timeout=params.get(_F),collection_formats=collection_formats)
	def get_account_transactions(self,account_resource_id,**kwargs):
		'Retrieval of an account transaction set (AISP)  # noqa: E501\n\n        <h3>Description</h3>   This call returns transactions for an account for a given PSU account that is specified by the AISP through an account resource identification.   The request may use some filter parameter in order to restrict the query   <ul>     <li>on a given imputation date range</li>     <li>past a given incremental technical identification</li>   </ul>   The result may be subject to pagination (i.e. retrieving a partial result in case of having too many results) through a set of pages by the ASPSP. Thereafter, the AISP may ask for the first, next, previous or last page of results. <h3>Prerequisites</h3>   <ul>     <li>The TPP has been registered by the Registration Authority for the AISP role</li>     <li>The TPP and the PSU have a contract that has been enrolled by the ASPSP</li>     <ul>       <li>At this step, the ASPSP has delivered an OAUTH2 "Authorization Code" or "Resource Owner Password" access token to the TPP (cf. § 3.4.2).</li>     </ul>     <li>The TPP and the ASPSP have successfully processed a mutual check and authentication </li>     <li>The TPP has presented its OAUTH2 "Authorization Code" or "Resource Owner Password" access token which allows the ASPSP to identify the relevant PSU and retrieve the linked PSU context (cf. § 3.4.2) is any.</li>     <li>The ASPSP takes into account the access token that establishes the link between the PSU and the AISP.</li>     <li>The TPP has previously retrieved the list of available accounts for the PSU</li>   </ul> <h3>Business flow</h3>   The AISP requests the ASPSP on one of the PSU’s accounts. It may specify some selection criteria.   The ASPSP answers by a set of transactions that matches the query. The result may be subject to pagination in order to avoid an excessive result set.   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_account_transactions(account_resource_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str account_resource_id: Identification of account resource to fetch (required)\n        :param datetime date_from: Inclusive minimal imputation date of the transactions.  Transactions having an imputation date equal to this parameter are included within the result. \n        :param datetime date_to: Exclusive maximal imputation date of the transactions.  Transactions having an imputation date equal to this parameter are not included within the result. \n        :param str after_entry_reference: Specifies the value on which the result has to be computed.  Only the transaction having a technical identification greater than this value must be included within the result \n        :param str transaction_status: Transactions having a transactionStatus equal to this parameter are included within the result.\n        :return: HalTransactions\n                 If the method is called asynchronously,\n                 returns the request thread.\n        ';kwargs[_A]=_D
		if kwargs.get(_B):return self.get_account_transactions_with_http_info(account_resource_id,**kwargs)
		else:data=self.get_account_transactions_with_http_info(account_resource_id,**kwargs);return data
	def get_account_transactions_with_http_info(self,account_resource_id,**kwargs):
		'Retrieval of an account transaction set (AISP)  # noqa: E501\n\n        <h3>Description</h3>   This call returns transactions for an account for a given PSU account that is specified by the AISP through an account resource identification.   The request may use some filter parameter in order to restrict the query   <ul>     <li>on a given imputation date range</li>     <li>past a given incremental technical identification</li>   </ul>   The result may be subject to pagination (i.e. retrieving a partial result in case of having too many results) through a set of pages by the ASPSP. Thereafter, the AISP may ask for the first, next, previous or last page of results. <h3>Prerequisites</h3>   <ul>     <li>The TPP has been registered by the Registration Authority for the AISP role</li>     <li>The TPP and the PSU have a contract that has been enrolled by the ASPSP</li>     <ul>       <li>At this step, the ASPSP has delivered an OAUTH2 "Authorization Code" or "Resource Owner Password" access token to the TPP (cf. § 3.4.2).</li>     </ul>     <li>The TPP and the ASPSP have successfully processed a mutual check and authentication </li>     <li>The TPP has presented its OAUTH2 "Authorization Code" or "Resource Owner Password" access token which allows the ASPSP to identify the relevant PSU and retrieve the linked PSU context (cf. § 3.4.2) is any.</li>     <li>The ASPSP takes into account the access token that establishes the link between the PSU and the AISP.</li>     <li>The TPP has previously retrieved the list of available accounts for the PSU</li>   </ul> <h3>Business flow</h3>   The AISP requests the ASPSP on one of the PSU’s accounts. It may specify some selection criteria.   The ASPSP answers by a set of transactions that matches the query. The result may be subject to pagination in order to avoid an excessive result set.   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_account_transactions_with_http_info(account_resource_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str account_resource_id: Identification of account resource to fetch (required)\n        :param datetime date_from: Inclusive minimal imputation date of the transactions.  Transactions having an imputation date equal to this parameter are included within the result. \n        :param datetime date_to: Exclusive maximal imputation date of the transactions.  Transactions having an imputation date equal to this parameter are not included within the result. \n        :param str after_entry_reference: Specifies the value on which the result has to be computed.  Only the transaction having a technical identification greater than this value must be included within the result \n        :param str transaction_status: Transactions having a transactionStatus equal to this parameter are included within the result.\n        :return: HalTransactions\n                 If the method is called asynchronously,\n                 returns the request thread.\n        ';D='transaction_status';C='date_to';B='date_from';A='after_entry_reference';all_params=[_C,B,C,A,D];all_params.append(_B);all_params.append(_A);all_params.append(_E);all_params.append(_F);params=locals()
		for (key,val) in six.iteritems(params[_G]):
			if key not in all_params:raise TypeError("Got an unexpected keyword argument '%s' to method get_account_transactions"%key)
			params[key]=val
		del params[_G]
		if _C not in params or params[_C]is _H:raise ValueError('Missing the required parameter `account_resource_id` when calling `get_account_transactions`')
		if _C in params and not re.search(_O,params[_C]):raise ValueError("Invalid value for parameter `account_resource_id` when calling `get_account_transactions`, must conform to the pattern `/^([a-zA-Z0-9 \\/\\-?:\\()\\.,']{1,45})$/`")
		if A in params and len(params[A])>40:raise ValueError('Invalid value for parameter `after_entry_reference` when calling `get_account_transactions`, length must be less than or equal to `40`')
		collection_formats={};path_params={}
		if _C in params:path_params[_P]=params[_C]
		query_params=[]
		if B in params:query_params.append(('dateFrom',params[B]))
		if C in params:query_params.append(('dateTo',params[C]))
		if A in params:query_params.append(('afterEntryReference',params[A]))
		if D in params:query_params.append(('transactionStatus',params[D]))
		header_params={};form_params=[];local_var_files={};body_params=_H;header_params[_I]=self.api_client.select_header_accept([_N]);header_params[_J]=self.api_client.select_header_content_type([_K]);auth_settings=[_L];return self.api_client.call_api('/accounts/{accountResourceId}/transactions',_M,path_params,query_params,header_params,body=body_params,post_params=form_params,files=local_var_files,response_type='HalTransactions',auth_settings=auth_settings,async_req=params.get(_B),_return_http_data_only=params.get(_A),_preload_content=params.get(_E,_D),_request_timeout=params.get(_F),collection_formats=collection_formats)
	def get_accounts(self,**kwargs):
		'Retrieval of the PSU accounts (AISP)  # noqa: E501\n\n        <h3>Description</h3>   This call returns all payment accounts that are relevant the PSU on behalf of whom the AISP is connected.   Thanks to HYPERMEDIA, each account is returned with the links aiming to ease access to the relevant transactions and balances.   The result may be subject to pagination (i.e. retrieving a partial result in case of having too many results) through a set of pages by the ASPSP. Thereafter, the AISP may ask for the first, next, previous or last page of results. <h3>Prerequisites</h3>   <ul>     <li>The TPP has been registered by the Registration Authority for the AISP role.</li>     <li>The TPP and the PSU have a contract that has been enrolled by the ASPSP</li>       <ul>         <li>At this step, the ASPSP has delivered an OAUTH2 "Authorization Code" or "Resource Owner Password" access token to the TPP (cf. § 3.4.2).</li>       </ul>     <li>The TPP and the ASPSP have successfully processed a mutual check and authentication</li>     <li>The TPP has presented its OAUTH2 "Authorization Code" or "Resource Owner Password" access token which allows the ASPSP to identify the relevant PSU and retrieve the linked PSU context (cf. § 3.4.2) if any.</li>     <li>The ASPSP takes into account the access token that establishes the link between the PSU and the AISP.</li>   </ul> <h3>Business Flow</h3>   The TPP sends a request to the ASPSP for retrieving the list of the PSU payment accounts.   The ASPSP computes the relevant PSU accounts and builds the answer as an accounts list.   The result may be subject to pagination in order to avoid an excessive result set.   Each payment account will be provided with its characteristics.   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_accounts(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :return: HalAccounts\n                 If the method is called asynchronously,\n                 returns the request thread.\n        ';kwargs[_A]=_D
		if kwargs.get(_B):return self.get_accounts_with_http_info(**kwargs)
		else:data=self.get_accounts_with_http_info(**kwargs);return data
	def get_accounts_with_http_info(self,**kwargs):
		'Retrieval of the PSU accounts (AISP)  # noqa: E501\n\n        <h3>Description</h3>   This call returns all payment accounts that are relevant the PSU on behalf of whom the AISP is connected.   Thanks to HYPERMEDIA, each account is returned with the links aiming to ease access to the relevant transactions and balances.   The result may be subject to pagination (i.e. retrieving a partial result in case of having too many results) through a set of pages by the ASPSP. Thereafter, the AISP may ask for the first, next, previous or last page of results. <h3>Prerequisites</h3>   <ul>     <li>The TPP has been registered by the Registration Authority for the AISP role.</li>     <li>The TPP and the PSU have a contract that has been enrolled by the ASPSP</li>       <ul>         <li>At this step, the ASPSP has delivered an OAUTH2 "Authorization Code" or "Resource Owner Password" access token to the TPP (cf. § 3.4.2).</li>       </ul>     <li>The TPP and the ASPSP have successfully processed a mutual check and authentication</li>     <li>The TPP has presented its OAUTH2 "Authorization Code" or "Resource Owner Password" access token which allows the ASPSP to identify the relevant PSU and retrieve the linked PSU context (cf. § 3.4.2) if any.</li>     <li>The ASPSP takes into account the access token that establishes the link between the PSU and the AISP.</li>   </ul> <h3>Business Flow</h3>   The TPP sends a request to the ASPSP for retrieving the list of the PSU payment accounts.   The ASPSP computes the relevant PSU accounts and builds the answer as an accounts list.   The result may be subject to pagination in order to avoid an excessive result set.   Each payment account will be provided with its characteristics.   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_accounts_with_http_info(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :return: HalAccounts\n                 If the method is called asynchronously,\n                 returns the request thread.\n        ';all_params=[];all_params.append(_B);all_params.append(_A);all_params.append(_E);all_params.append(_F);params=locals()
		for (key,val) in six.iteritems(params[_G]):
			if key not in all_params:raise TypeError("Got an unexpected keyword argument '%s' to method get_accounts"%key)
			params[key]=val
		del params[_G];collection_formats={};path_params={};query_params=[];header_params={};form_params=[];local_var_files={};body_params=_H;header_params[_I]=self.api_client.select_header_accept([_N]);header_params[_J]=self.api_client.select_header_content_type([_K]);auth_settings=[_L];return self.api_client.call_api('/accounts',_M,path_params,query_params,header_params,body=body_params,post_params=form_params,files=local_var_files,response_type='HalAccounts',auth_settings=auth_settings,async_req=params.get(_B),_return_http_data_only=params.get(_A),_preload_content=params.get(_E,_D),_request_timeout=params.get(_F),collection_formats=collection_formats)
	def get_current_consent(self,**kwargs):
		'Returns current consent (AISP)  # noqa: E501\n\n        <h3>Description</h3>   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_current_consent(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :return: Consent\n                 If the method is called asynchronously,\n                 returns the request thread.\n        ';kwargs[_A]=_D
		if kwargs.get(_B):return self.get_current_consent_with_http_info(**kwargs)
		else:data=self.get_current_consent_with_http_info(**kwargs);return data
	def get_current_consent_with_http_info(self,**kwargs):
		'Returns current consent (AISP)  # noqa: E501\n\n        <h3>Description</h3>   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_current_consent_with_http_info(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :return: Consent\n                 If the method is called asynchronously,\n                 returns the request thread.\n        ';all_params=[];all_params.append(_B);all_params.append(_A);all_params.append(_E);all_params.append(_F);params=locals()
		for (key,val) in six.iteritems(params[_G]):
			if key not in all_params:raise TypeError("Got an unexpected keyword argument '%s' to method get_current_consent"%key)
			params[key]=val
		del params[_G];collection_formats={};path_params={};query_params=[];header_params={};form_params=[];local_var_files={};body_params=_H;header_params[_I]=self.api_client.select_header_accept([_Q]);header_params[_J]=self.api_client.select_header_content_type([_K]);auth_settings=[];return self.api_client.call_api('/consents/current',_M,path_params,query_params,header_params,body=body_params,post_params=form_params,files=local_var_files,response_type=_R,auth_settings=auth_settings,async_req=params.get(_B),_return_http_data_only=params.get(_A),_preload_content=params.get(_E,_D),_request_timeout=params.get(_F),collection_formats=collection_formats)
	def modify_consents(self,**kwargs):
		'Forwarding the PSU consent (AISP)  # noqa: E501\n\n        <h3>Description</h3>   In the mixed detailed consent on accounts   <ul>     <li>the AISP captures the consent of the PSU</li>     <li>then it forwards this consent to the ASPSP</li>   </ul>   This consent replaces any prior consent that was previously sent by the AISP. <h3>Prerequisites</h3>   <ul>     <li>The TPP has been registered by the Registration Authority for the AISP role.</li>     <li>The TPP and the PSU have a contract that has been enrolled by the ASPSP</li>       <ul>       <li>At this step, the ASPSP has delivered an OAUTH2 "Authorization Code" or "Resource Owner Password" access token to the TPP (cf. § 3.4.2).</li>       </ul>     <li>The TPP and the ASPSP have successfully processed a mutual check and authentication</li>     <li>The TPP has presented its OAUTH2 "Authorization Code" or "Resource Owner Password" access token which allows the ASPSP to identify the relevant PSU and retrieve the linked PSU context (cf. § 3.4.2) if any.</li>     <li>The ASPSP takes into account the access token that establishes the link between the PSU and the AISP.</li>   </ul> <h3>Business Flow</h3>   The PSU specifies to the AISP which of his/her accounts will be accessible and which functionalities should be available.   The AISP forwards these settings to the ASPSP.   The ASPSP answers by HTTP201 return code.   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.modify_consents(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param Access access: List of consents granted to the AISP by the PSU.\n        :param str redirect_uri:\n        :return: Consent\n                 If the method is called asynchronously,\n                 returns the request thread.\n        ';kwargs[_A]=_D
		if kwargs.get(_B):return self.modify_consents_with_http_info(**kwargs)
		else:data=self.modify_consents_with_http_info(**kwargs);return data
	def modify_consents_with_http_info(self,**kwargs):
		'Forwarding the PSU consent (AISP)  # noqa: E501\n\n        <h3>Description</h3>   In the mixed detailed consent on accounts   <ul>     <li>the AISP captures the consent of the PSU</li>     <li>then it forwards this consent to the ASPSP</li>   </ul>   This consent replaces any prior consent that was previously sent by the AISP. <h3>Prerequisites</h3>   <ul>     <li>The TPP has been registered by the Registration Authority for the AISP role.</li>     <li>The TPP and the PSU have a contract that has been enrolled by the ASPSP</li>       <ul>       <li>At this step, the ASPSP has delivered an OAUTH2 "Authorization Code" or "Resource Owner Password" access token to the TPP (cf. § 3.4.2).</li>       </ul>     <li>The TPP and the ASPSP have successfully processed a mutual check and authentication</li>     <li>The TPP has presented its OAUTH2 "Authorization Code" or "Resource Owner Password" access token which allows the ASPSP to identify the relevant PSU and retrieve the linked PSU context (cf. § 3.4.2) if any.</li>     <li>The ASPSP takes into account the access token that establishes the link between the PSU and the AISP.</li>   </ul> <h3>Business Flow</h3>   The PSU specifies to the AISP which of his/her accounts will be accessible and which functionalities should be available.   The AISP forwards these settings to the ASPSP.   The ASPSP answers by HTTP201 return code.   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.modify_consents_with_http_info(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param Access access: List of consents granted to the AISP by the PSU.\n        :param str redirect_uri:\n        :return: Consent\n                 If the method is called asynchronously,\n                 returns the request thread.\n        ';B='access';A='redirect_uri';all_params=[B,A];all_params.append(_B);all_params.append(_A);all_params.append(_E);all_params.append(_F);params=locals()
		for (key,val) in six.iteritems(params[_G]):
			if key not in all_params:raise TypeError("Got an unexpected keyword argument '%s' to method modify_consents"%key)
			params[key]=val
		del params[_G];collection_formats={};path_params={};query_params=[]
		if A in params:query_params.append((A,params[A]))
		header_params={};form_params=[];local_var_files={};body_params=_H
		if B in params:body_params=params[B]
		header_params[_I]=self.api_client.select_header_accept([_Q]);header_params[_J]=self.api_client.select_header_content_type([_K]);auth_settings=[_L];return self.api_client.call_api('/consents','PUT',path_params,query_params,header_params,body=body_params,post_params=form_params,files=local_var_files,response_type=_R,auth_settings=auth_settings,async_req=params.get(_B),_return_http_data_only=params.get(_A),_preload_content=params.get(_E,_D),_request_timeout=params.get(_F),collection_formats=collection_formats)