'\n    enable:Banking SDK\n\n    Currently enable:Banking SDK consists of [authorization](#auth-api), [account information](#aisp-api) and [payment initiation](#pisp-api) APIs. The same calls and data structures are used for interacting with different banks. In order to use each of the APIs corresponding API instance needs to be created with bank specific settings.  enable:Banking SDK API is based on [STET PSD2 specification](https://www.stet.eu/en/psd2/).  This API intends to provide an interface for Third Party Providers (TPP) for accessing Account Servicing Payment Service Providers (ASPSP, i.e. banks).  TPP may act as Account Information Service Provider (AISP), Payment Initiation Service Providers (PISP) or both.  The Payment Service User (PSU) is the owner of the accounts held by the ASPSP and gives accreditations to the TPP in order to access his accounts information or initiates payment from these accounts.   # noqa: E501\n\n    API version: 0.3.0\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
from __future__ import absolute_import
_B='async_req'
_A='_return_http_data_only'
import re,six
from enablebanking.api_client import ApiClient
class MetaApi:
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    Ref: https://github.com/swagger-api/swagger-codegen\n    '
	def __init__(self,api_client):self.api_client=api_client
	def get_connectors(self,**kwargs):
		'Retrieval of the available connectors  # noqa: E501\n\n        This call returns all available connectors (all or for a specified country).   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_connectors(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str country: Country ISO code\n        :return: HalConnectors\n                 If the method is called asynchronously,\n                 returns the request thread.\n        ';kwargs[_A]=True
		if kwargs.get(_B):return self.get_connectors_with_http_info(**kwargs)
		else:data=self.get_connectors_with_http_info(**kwargs);return data
	def get_connectors_with_http_info(self,**kwargs):
		'Retrieval of the available connectors  # noqa: E501\n\n        This call returns all available connectors (all or for a specified country).   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_connectors_with_http_info(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str country: Country ISO code\n        :return: HalConnectors\n                 If the method is called asynchronously,\n                 returns the request thread.\n        ';E='application/json';D='kwargs';C='_request_timeout';B='_preload_content';A='country';all_params=[A];all_params.append(_B);all_params.append(_A);all_params.append(B);all_params.append(C);params=locals()
		for (key,val) in six.iteritems(params[D]):
			if key not in all_params:raise TypeError("Got an unexpected keyword argument '%s' to method get_connectors"%key)
			params[key]=val
		del params[D];collection_formats={};path_params={};query_params=[]
		if A in params:query_params.append((A,params[A]))
		header_params={};form_params=[];local_var_files={};body_params=None;header_params['Accept']=self.api_client.select_header_accept([E]);header_params['Content-Type']=self.api_client.select_header_content_type([E]);auth_settings=[];return self.api_client.call_api('/connectors','GET',path_params,query_params,header_params,body=body_params,post_params=form_params,files=local_var_files,response_type='HalConnectors',auth_settings=auth_settings,async_req=params.get(_B),_return_http_data_only=params.get(_A),_preload_content=params.get(B,True),_request_timeout=params.get(C),collection_formats=collection_formats)