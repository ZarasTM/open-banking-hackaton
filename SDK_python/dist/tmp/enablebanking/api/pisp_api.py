'\n    enable:Banking SDK\n\n    Currently enable:Banking SDK consists of [authorization](#auth-api), [account information](#aisp-api) and [payment initiation](#pisp-api) APIs. The same calls and data structures are used for interacting with different banks. In order to use each of the APIs corresponding API instance needs to be created with bank specific settings.  enable:Banking SDK API is based on [STET PSD2 specification](https://www.stet.eu/en/psd2/).  This API intends to provide an interface for Third Party Providers (TPP) for accessing Account Servicing Payment Service Providers (ASPSP, i.e. banks).  TPP may act as Account Information Service Provider (AISP), Payment Initiation Service Providers (PISP) or both.  The Payment Service User (PSU) is the owner of the accounts held by the ASPSP and gives accreditations to the TPP in order to access his accounts information or initiates payment from these accounts.   # noqa: E501\n\n    API version: 0.3.0\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
from __future__ import absolute_import
_T='HalPaymentRequestCreation'
_S='POST'
_R='HalPaymentRequest'
_Q='/payment-requests/{paymentRequestResourceId}'
_P='application/hal+json; charset=utf-8'
_O='paymentRequestResourceId'
_N="^([a-zA-Z0-9 \\/\\-?:\\()\\.,']{1,40})$"
_M='tppToken'
_L='Content-Type'
_K='Accept'
_J='application/json'
_I='kwargs'
_H='_request_timeout'
_G='_preload_content'
_F=True
_E=None
_D='payment_request'
_C='async_req'
_B='_return_http_data_only'
_A='payment_request_resource_id'
import re,six
from enablebanking.api_client import ApiClient
class PISPApi:
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    Ref: https://github.com/swagger-api/swagger-codegen\n    '
	def __init__(self,api_client):self.api_client=api_client
	def get_payment_request(self,payment_request_resource_id,**kwargs):
		'Retrieval of a payment request (PISP)  # noqa: E501\n\n        <h3>Description</h3> The following use cases can be applied: <ul>   <li>retrieval of a payment request on behalf of a merchant</li>   <li>retrieval of a transfer request on behalf of the account\'s owner</li>   <li>retrieval of a standing-order request on behalf of the account\'s owner</li> </ul> The PISP has sent a Request through a POST command. <br>   The ASPSP has registered the Request, updated if necessary the relevant identifiers in order to avoid duplicates and returned the location of the updated Request.<br>   The PISP gets the Request that might have been updated with the resource identifiers, the status of the Payment/Transfer Request and the status of the subsequent credit transfer.<br> <h3>Prerequisites</h3> <ul>   <li>The TPP has been registered by the Registration Authority for the PISP role</li>   <li>The TPP was provided with an OAUTH2 "Client Credential" access token by the ASPSP (cf. § 3.4.3).</li>   <li>The TPP has previously posted a Request which has been saved by the ASPSP (cf. § 4.5.3)</li>   <ul>     <li>The ASPSP has answered with a location link to the saved Payment/Transfer Request (cf. § 4.5.4)</li>   </ul>   <li>The TPP and the ASPSP have successfully processed a mutual check and authentication </li>   <li>The TPP has presented its "OAUTH2 Client Credential" access token</li> </ul> <h3>Business flow</h3> The PISP asks to retrieve the Payment/Transfer Request that has been saved by the ASPSP. The PISP uses the location link provided by the ASPSP in response of the posting of this request.<br> The ASPSP returns the previously posted Payment/Transfer Request which is enriched with:<br> <ul>   <li>The resource identifiers given by the ASPSP</li>   <li>The status information of the Payment Request and of the subsequent credit transfer</li> </ul> The status information must be available during at least 30 calendar days after the posting of the Payment Request. However, the ASPSP may increase this availability duration, based on its own rules.<br>   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_payment_request(payment_request_resource_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str payment_request_resource_id: Identification of the Payment Request Resource (required)\n        :return: HalPaymentRequest\n                 If the method is called asynchronously,\n                 returns the request thread.\n        ';kwargs[_B]=_F
		if kwargs.get(_C):return self.get_payment_request_with_http_info(payment_request_resource_id,**kwargs)
		else:data=self.get_payment_request_with_http_info(payment_request_resource_id,**kwargs);return data
	def get_payment_request_with_http_info(self,payment_request_resource_id,**kwargs):
		'Retrieval of a payment request (PISP)  # noqa: E501\n\n        <h3>Description</h3> The following use cases can be applied: <ul>   <li>retrieval of a payment request on behalf of a merchant</li>   <li>retrieval of a transfer request on behalf of the account\'s owner</li>   <li>retrieval of a standing-order request on behalf of the account\'s owner</li> </ul> The PISP has sent a Request through a POST command. <br>   The ASPSP has registered the Request, updated if necessary the relevant identifiers in order to avoid duplicates and returned the location of the updated Request.<br>   The PISP gets the Request that might have been updated with the resource identifiers, the status of the Payment/Transfer Request and the status of the subsequent credit transfer.<br> <h3>Prerequisites</h3> <ul>   <li>The TPP has been registered by the Registration Authority for the PISP role</li>   <li>The TPP was provided with an OAUTH2 "Client Credential" access token by the ASPSP (cf. § 3.4.3).</li>   <li>The TPP has previously posted a Request which has been saved by the ASPSP (cf. § 4.5.3)</li>   <ul>     <li>The ASPSP has answered with a location link to the saved Payment/Transfer Request (cf. § 4.5.4)</li>   </ul>   <li>The TPP and the ASPSP have successfully processed a mutual check and authentication </li>   <li>The TPP has presented its "OAUTH2 Client Credential" access token</li> </ul> <h3>Business flow</h3> The PISP asks to retrieve the Payment/Transfer Request that has been saved by the ASPSP. The PISP uses the location link provided by the ASPSP in response of the posting of this request.<br> The ASPSP returns the previously posted Payment/Transfer Request which is enriched with:<br> <ul>   <li>The resource identifiers given by the ASPSP</li>   <li>The status information of the Payment Request and of the subsequent credit transfer</li> </ul> The status information must be available during at least 30 calendar days after the posting of the Payment Request. However, the ASPSP may increase this availability duration, based on its own rules.<br>   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_payment_request_with_http_info(payment_request_resource_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str payment_request_resource_id: Identification of the Payment Request Resource (required)\n        :return: HalPaymentRequest\n                 If the method is called asynchronously,\n                 returns the request thread.\n        ';all_params=[_A];all_params.append(_C);all_params.append(_B);all_params.append(_G);all_params.append(_H);params=locals()
		for (key,val) in six.iteritems(params[_I]):
			if key not in all_params:raise TypeError("Got an unexpected keyword argument '%s' to method get_payment_request"%key)
			params[key]=val
		del params[_I]
		if _A not in params or params[_A]is _E:raise ValueError('Missing the required parameter `payment_request_resource_id` when calling `get_payment_request`')
		if _A in params and not re.search(_N,params[_A]):raise ValueError("Invalid value for parameter `payment_request_resource_id` when calling `get_payment_request`, must conform to the pattern `/^([a-zA-Z0-9 \\/\\-?:\\()\\.,']{1,40})$/`")
		collection_formats={};path_params={}
		if _A in params:path_params[_O]=params[_A]
		query_params=[];header_params={};form_params=[];local_var_files={};body_params=_E;header_params[_K]=self.api_client.select_header_accept([_P]);header_params[_L]=self.api_client.select_header_content_type([_J]);auth_settings=[_M];return self.api_client.call_api(_Q,'GET',path_params,query_params,header_params,body=body_params,post_params=form_params,files=local_var_files,response_type=_R,auth_settings=auth_settings,async_req=params.get(_C),_return_http_data_only=params.get(_B),_preload_content=params.get(_G,_F),_request_timeout=params.get(_H),collection_formats=collection_formats)
	def make_payment_request(self,payment_request,**kwargs):
		'Payment request initiation (PISP)  # noqa: E501\n\n        <h3>Description</h3> The following use cases can be applied: <ul>   <li>payment request on behalf of a merchant</li>   <li>transfer request on behalf of the account\'s owner</li>   <li>standing-order request on behalf of the account\'s owner</li> </ul> <h4>Data content</h4>   A payment request or a transfer request might embed several payment instructions having   <ul>     <li>one single execution date or multiple execution dates</li>     <ul>       <li>case of one single execution date, this date must be set at the payment level</li>       <li>case of multiple execution dates, those dates must be set at each payment instruction level</li>     </ul>     <li>one single beneficiary or multiple beneficiaries</li>     <ul>       <li>case of one single beneficiary, this beneficiary must be set at the payment level</li>       <li>case of multiple beneficiaries, those beneficiaries must be set at each payment instruction level</li>     </ul>   </ul>   A standing order request must embed one single payment instruction and must address one single beneficiary.   <ul>     <li>The beneficiary must be set at the payment level</li>     <li>The standing order specific characteristics (start date, periodicity...) must be set at the instruction level</li>   </ul> <h4>Prerequisites for all use cases</h4> <ul>   <li>The TPP has been registered by the Registration Authority for the PISP role</li>   <li>The TPP was provided with an OAUTH2 "Client Credential" access token by the ASPSP (cf. § 3.4.3).</li>   <li>The TPP and the ASPSP have successfully processed a mutual check and authentication </li>   <li>The TPP has presented its "OAUTH2 Client Credential" access token</li> </ul> <h4>Business flow</h4>   <h5>Payment Request use case</h5>     The PISP forwards a payment request on behalf of a merchant.<br>     The PSU buys some goods or services on an e-commerce website held by a merchant. Among other payment method, the merchant suggests the use of a PISP service. As there is obviously a contract between the merchant and the PISP, there is no need of such a contract between the PSU and this PISP to initiate the process.<br>     Case of the PSU that chooses to use the PISP service:<br>     <ul>       <li>The merchant forwards the requested payment characteristics to the PISP and redirects the PSU to the PISP portal.</li>       <li>The PISP requests from the PSU which ASPSP will be used.</li>       <li>The PISP prepares the Payment Request and sends this request to the ASPSP.</li>       <li>The Request can embed several payment instructions having different requested execution date.</li>       <li>The beneficiary, as being the merchant, is set at the payment level.</li>     </ul>   <h5>Transfer Request use case</h5>     The PISP forwards a transfer request on behalf of the owner of the account.     <ul>       <li>The PSU provides the PISP with all information needed for the transfer.</li>       <li>The PISP prepares the Transfer Request and sends this request to the relevant ASPSP that holds the debtor account.</li>       <li>The Request can embed several payment instructions having different beneficiaries.</li>       <li>The requested execution date, as being the same for all instructions, is set at the payment level.</li>     </ul>   <h5>Standing Order Request use case</h5>     The PISP forwards a Standing Order request on behalf of the owner of the account.     <ul>       <li>The PSU provides the PISP with all information needed for the Standing Order.</li>       <li>The PISP prepares the Standing Order Request and sends this request to the relevant ASPSP that holds the debtor account.</li>       <li>The Request embeds one single payment instruction with</li>       <ul>         <li>The requested execution date of the first occurrence</li>         <li>The requested execution frequency of the payment in order to compute further execution dates</li>         <li>An execution rule to handle cases when the computed execution dates cannot be processed (e.g. bank holydays)</li>         <li>An optional end date for closing the standing Order</li>       </ul>     </ul> <h4>Authentication flows for all use cases</h4>   As the request posted by the PISP to the ASPSP needs a PSU authentication before execution, this request will include:   <ul>     <li>The specification of the authentication approaches that are supported by the PISP (any combination of "REDIRECT", "EMBEDDED" and "DECOUPLED" values).</li>     <li>In case of possible REDIRECT or DECOUPLED authentication approach, one or two call-back URLs to be used by the ASPSP at the finalisation of the authentication and consent process :</li>     <ul>       <li>The first call-back URL will be called by the ASPSP if the Payment Request is processed without any error or rejection by the PSU</li>       <li>The second call-back URL is to be used by the ASPSP in case of processing error or rejection by the PSU. Since this second URL is optional, the PISP might not provide it. In this case, the ASPSP will use the same URL for any processing result.</li>       <li>Both call-back URLS must be used in a TLS-secured request.</li>     </ul>     <li>In case of possible "EMBEDDED" or "DECOUPLED" approaches, the PSU identifier that can be processed by the ASPSP for PSU recognition must have been set within the request body [debtor] structure.</li>   </ul>   The ASPSP saves the request and answers to the PISP. The answer embeds:   <ul>     <li>A location link of the saved Request that will be further used to retrieve the Request and its status information.</li>     <li>The specification of the chosen authentication approach taking into account both the PISP and the PSU capabilities.</li>     <li>In case of chosen REDIRECT authentication approach, the URL to be used by the PISP for redirecting the PSU in order to perform a authentication.</li>   </ul>   Case of the PSU neither gives nor denies his/her consent, the Request shall expire and is then rejected to the PISP. The expiration delay is specified by each ASPSP.<br>   <h5>Redirect authentication approach </h5>     When the chosen authentication approach within the ASPSP answers is set to "REDIRECT":<br>     <ul>       <li>The PISP redirects the PSU to the ASPSP which authenticates the PSU </li>       <li>The ASPSP asks the PSU to give (or deny) his/her consent to the Payment Request</li>       <li>The PSU chooses or confirms which of his/her accounts shall be used by the ASPSP for the future Credit Transfer.</li>       <li>The ASPSP is then able to initiate the subsequent Credit Transfer</li>       <li>The ASPSP redirects the PSU to the PISP using one of the call-back URLs provided within the posted Payment Request</li>     </ul>     <img src="pisp-redirect-authentication.png" />     <img src="pisp-redirect-authentication2.png" />   <h5>Decoupled authentication approach</h5>     When the chosen authentication approach is "DECOUPLED":<br>     <ul>       <li>Based on the PSU identifier provided within the Payment Request by the PISP, the ASPSP gives the PSU with the Payment Request details and challenges the PSU for a Strong Customer Authentication on a decoupled device or application.</li>       <li>The PSU chooses or confirms which of his/her accounts shall be used by the ASPSP for the future Credit Transfer.</li>       <li>The ASPSP is then able to initiate the subsequent Credit Transfer</li>       <li>The ASPSP notifies the PISP about the finalisation of the authentication and consent process by using one of the call-back URLs provided within the posted Payment Request</li>     </ul>     <img src="pisp-decoupled-authentication.png" />     <img src="pisp-decoupled-authentication2.png" />   <h5>Embedded authentication approach</h5>     When the chosen authentication approach within the ASPSP answers is set to "EMBEDDED":<br>     <ul>       <li>The TPP informs the PSU that a challenge is needed for completing the Payment Request processing. This challenge will be one of the following:</li>       <ul>         <li>A One-Time-Password sent by the ASPSP to the PSU on a separate device or application.</li>         <li>A response computed by a specific device on base of a challenge sent by the ASPSP to the PSU on a separate device or application.</li>       </ul>       <li>The PSU unlock the device or application through a "knowledge factor" and/or an "inherence factor" (biometric), retrieves the Payment Request details and processes the data sent by the ASPSP; </li>       <li>The PSU might choose or confirm which of his/her accounts shall be used by the ASPSP for the future Credit Transfer when the device or application allows it.</li>       <li>When agreeing the Payment Request, the PSU enters the resulting authentication factor through the PISP interface which will forward it to the ASPSP through a confirmation request (cf. § 4.7)</li>     </ul>     <img src="pisp-embedded-authentication.png" />     <img src="pisp-embedded-authentication2.png" />   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.make_payment_request(payment_request, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param PaymentRequestResource payment_request: ISO20022 based payment Initiation Request (required)\n        :return: HalPaymentRequestCreation\n                 If the method is called asynchronously,\n                 returns the request thread.\n        ';kwargs[_B]=_F
		if kwargs.get(_C):return self.make_payment_request_with_http_info(payment_request,**kwargs)
		else:data=self.make_payment_request_with_http_info(payment_request,**kwargs);return data
	def make_payment_request_with_http_info(self,payment_request,**kwargs):
		'Payment request initiation (PISP)  # noqa: E501\n\n        <h3>Description</h3> The following use cases can be applied: <ul>   <li>payment request on behalf of a merchant</li>   <li>transfer request on behalf of the account\'s owner</li>   <li>standing-order request on behalf of the account\'s owner</li> </ul> <h4>Data content</h4>   A payment request or a transfer request might embed several payment instructions having   <ul>     <li>one single execution date or multiple execution dates</li>     <ul>       <li>case of one single execution date, this date must be set at the payment level</li>       <li>case of multiple execution dates, those dates must be set at each payment instruction level</li>     </ul>     <li>one single beneficiary or multiple beneficiaries</li>     <ul>       <li>case of one single beneficiary, this beneficiary must be set at the payment level</li>       <li>case of multiple beneficiaries, those beneficiaries must be set at each payment instruction level</li>     </ul>   </ul>   A standing order request must embed one single payment instruction and must address one single beneficiary.   <ul>     <li>The beneficiary must be set at the payment level</li>     <li>The standing order specific characteristics (start date, periodicity...) must be set at the instruction level</li>   </ul> <h4>Prerequisites for all use cases</h4> <ul>   <li>The TPP has been registered by the Registration Authority for the PISP role</li>   <li>The TPP was provided with an OAUTH2 "Client Credential" access token by the ASPSP (cf. § 3.4.3).</li>   <li>The TPP and the ASPSP have successfully processed a mutual check and authentication </li>   <li>The TPP has presented its "OAUTH2 Client Credential" access token</li> </ul> <h4>Business flow</h4>   <h5>Payment Request use case</h5>     The PISP forwards a payment request on behalf of a merchant.<br>     The PSU buys some goods or services on an e-commerce website held by a merchant. Among other payment method, the merchant suggests the use of a PISP service. As there is obviously a contract between the merchant and the PISP, there is no need of such a contract between the PSU and this PISP to initiate the process.<br>     Case of the PSU that chooses to use the PISP service:<br>     <ul>       <li>The merchant forwards the requested payment characteristics to the PISP and redirects the PSU to the PISP portal.</li>       <li>The PISP requests from the PSU which ASPSP will be used.</li>       <li>The PISP prepares the Payment Request and sends this request to the ASPSP.</li>       <li>The Request can embed several payment instructions having different requested execution date.</li>       <li>The beneficiary, as being the merchant, is set at the payment level.</li>     </ul>   <h5>Transfer Request use case</h5>     The PISP forwards a transfer request on behalf of the owner of the account.     <ul>       <li>The PSU provides the PISP with all information needed for the transfer.</li>       <li>The PISP prepares the Transfer Request and sends this request to the relevant ASPSP that holds the debtor account.</li>       <li>The Request can embed several payment instructions having different beneficiaries.</li>       <li>The requested execution date, as being the same for all instructions, is set at the payment level.</li>     </ul>   <h5>Standing Order Request use case</h5>     The PISP forwards a Standing Order request on behalf of the owner of the account.     <ul>       <li>The PSU provides the PISP with all information needed for the Standing Order.</li>       <li>The PISP prepares the Standing Order Request and sends this request to the relevant ASPSP that holds the debtor account.</li>       <li>The Request embeds one single payment instruction with</li>       <ul>         <li>The requested execution date of the first occurrence</li>         <li>The requested execution frequency of the payment in order to compute further execution dates</li>         <li>An execution rule to handle cases when the computed execution dates cannot be processed (e.g. bank holydays)</li>         <li>An optional end date for closing the standing Order</li>       </ul>     </ul> <h4>Authentication flows for all use cases</h4>   As the request posted by the PISP to the ASPSP needs a PSU authentication before execution, this request will include:   <ul>     <li>The specification of the authentication approaches that are supported by the PISP (any combination of "REDIRECT", "EMBEDDED" and "DECOUPLED" values).</li>     <li>In case of possible REDIRECT or DECOUPLED authentication approach, one or two call-back URLs to be used by the ASPSP at the finalisation of the authentication and consent process :</li>     <ul>       <li>The first call-back URL will be called by the ASPSP if the Payment Request is processed without any error or rejection by the PSU</li>       <li>The second call-back URL is to be used by the ASPSP in case of processing error or rejection by the PSU. Since this second URL is optional, the PISP might not provide it. In this case, the ASPSP will use the same URL for any processing result.</li>       <li>Both call-back URLS must be used in a TLS-secured request.</li>     </ul>     <li>In case of possible "EMBEDDED" or "DECOUPLED" approaches, the PSU identifier that can be processed by the ASPSP for PSU recognition must have been set within the request body [debtor] structure.</li>   </ul>   The ASPSP saves the request and answers to the PISP. The answer embeds:   <ul>     <li>A location link of the saved Request that will be further used to retrieve the Request and its status information.</li>     <li>The specification of the chosen authentication approach taking into account both the PISP and the PSU capabilities.</li>     <li>In case of chosen REDIRECT authentication approach, the URL to be used by the PISP for redirecting the PSU in order to perform a authentication.</li>   </ul>   Case of the PSU neither gives nor denies his/her consent, the Request shall expire and is then rejected to the PISP. The expiration delay is specified by each ASPSP.<br>   <h5>Redirect authentication approach </h5>     When the chosen authentication approach within the ASPSP answers is set to "REDIRECT":<br>     <ul>       <li>The PISP redirects the PSU to the ASPSP which authenticates the PSU </li>       <li>The ASPSP asks the PSU to give (or deny) his/her consent to the Payment Request</li>       <li>The PSU chooses or confirms which of his/her accounts shall be used by the ASPSP for the future Credit Transfer.</li>       <li>The ASPSP is then able to initiate the subsequent Credit Transfer</li>       <li>The ASPSP redirects the PSU to the PISP using one of the call-back URLs provided within the posted Payment Request</li>     </ul>     <img src="pisp-redirect-authentication.png" />     <img src="pisp-redirect-authentication2.png" />   <h5>Decoupled authentication approach</h5>     When the chosen authentication approach is "DECOUPLED":<br>     <ul>       <li>Based on the PSU identifier provided within the Payment Request by the PISP, the ASPSP gives the PSU with the Payment Request details and challenges the PSU for a Strong Customer Authentication on a decoupled device or application.</li>       <li>The PSU chooses or confirms which of his/her accounts shall be used by the ASPSP for the future Credit Transfer.</li>       <li>The ASPSP is then able to initiate the subsequent Credit Transfer</li>       <li>The ASPSP notifies the PISP about the finalisation of the authentication and consent process by using one of the call-back URLs provided within the posted Payment Request</li>     </ul>     <img src="pisp-decoupled-authentication.png" />     <img src="pisp-decoupled-authentication2.png" />   <h5>Embedded authentication approach</h5>     When the chosen authentication approach within the ASPSP answers is set to "EMBEDDED":<br>     <ul>       <li>The TPP informs the PSU that a challenge is needed for completing the Payment Request processing. This challenge will be one of the following:</li>       <ul>         <li>A One-Time-Password sent by the ASPSP to the PSU on a separate device or application.</li>         <li>A response computed by a specific device on base of a challenge sent by the ASPSP to the PSU on a separate device or application.</li>       </ul>       <li>The PSU unlock the device or application through a "knowledge factor" and/or an "inherence factor" (biometric), retrieves the Payment Request details and processes the data sent by the ASPSP; </li>       <li>The PSU might choose or confirm which of his/her accounts shall be used by the ASPSP for the future Credit Transfer when the device or application allows it.</li>       <li>When agreeing the Payment Request, the PSU enters the resulting authentication factor through the PISP interface which will forward it to the ASPSP through a confirmation request (cf. § 4.7)</li>     </ul>     <img src="pisp-embedded-authentication.png" />     <img src="pisp-embedded-authentication2.png" />   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.make_payment_request_with_http_info(payment_request, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param PaymentRequestResource payment_request: ISO20022 based payment Initiation Request (required)\n        :return: HalPaymentRequestCreation\n                 If the method is called asynchronously,\n                 returns the request thread.\n        ';all_params=[_D];all_params.append(_C);all_params.append(_B);all_params.append(_G);all_params.append(_H);params=locals()
		for (key,val) in six.iteritems(params[_I]):
			if key not in all_params:raise TypeError("Got an unexpected keyword argument '%s' to method make_payment_request"%key)
			params[key]=val
		del params[_I]
		if _D not in params or params[_D]is _E:raise ValueError('Missing the required parameter `payment_request` when calling `make_payment_request`')
		collection_formats={};path_params={};query_params=[];header_params={};form_params=[];local_var_files={};body_params=_E
		if _D in params:body_params=params[_D]
		header_params[_K]=self.api_client.select_header_accept([_P]);header_params[_L]=self.api_client.select_header_content_type([_J]);auth_settings=[_M];return self.api_client.call_api('/payment-requests',_S,path_params,query_params,header_params,body=body_params,post_params=form_params,files=local_var_files,response_type=_T,auth_settings=auth_settings,async_req=params.get(_C),_return_http_data_only=params.get(_B),_preload_content=params.get(_G,_F),_request_timeout=params.get(_H),collection_formats=collection_formats)
	def make_payment_request_confirmation(self,payment_request_resource_id,**kwargs):
		'Confirmation of a payment request or a modification request (PISP)  # noqa: E501\n\n        <h3>Description</h3>   The PISP confirms one of the following requests<br>   <ul>     <li>payment request on behalf of a merchant</li>     <li>transfer request on behalf of the account\'s owner</li>     <li>standing-order request on behalf of the account\'s owner</li>   </ul>   The ASPSP answers with a status of the relevant request and the subsequent Credit Transfer. <h3>Prerequisites</h3>   <ul>     <li> The TPP has been registered by the Registration Authority for the PISP role</li>     <li> The TPP was provided with an OAUTH2 "Client Credential" access token by the ASPSP (cf. § 3.4.3).</li>     <li> The TPP has previously posted a Request which has been saved by the ASPSP (cf. § 4.5.3)</li>     <ul>       <li>The ASPSP has answered with a location link to the saved Payment Request (cf. § 4.5.4)</li>       <li> The TPP has retrieved the saved request in order to get the relevant resource Ids (cf. § 4.6).</li>     </ul>     <li> The TPP and the ASPSP have successfully processed a mutual check and authentication </li>     <li> The TPP has presented its "OAUTH2 Client Credential" access token </li>   </ul> <h3>Business flow</h3>   Once the PSU has been authenticated, it is the due to the PISP to confirm the Request to the ASPSP in order to complete the process flow.<br>   In REDIRECT and DECOUPLED approach, this confirmation is not a prerequisite to the execution of the Credit Transfer.<br>   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.make_payment_request_confirmation(payment_request_resource_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str payment_request_resource_id: Identification of the Payment Request Resource (required)\n        :param PaymentRequestConfirmation confirmation: Data needed for confirmation of the Payment Request, especially in EMBEDDED approach \n        :return: HalPaymentRequest\n                 If the method is called asynchronously,\n                 returns the request thread.\n        ';kwargs[_B]=_F
		if kwargs.get(_C):return self.make_payment_request_confirmation_with_http_info(payment_request_resource_id,**kwargs)
		else:data=self.make_payment_request_confirmation_with_http_info(payment_request_resource_id,**kwargs);return data
	def make_payment_request_confirmation_with_http_info(self,payment_request_resource_id,**kwargs):
		'Confirmation of a payment request or a modification request (PISP)  # noqa: E501\n\n        <h3>Description</h3>   The PISP confirms one of the following requests<br>   <ul>     <li>payment request on behalf of a merchant</li>     <li>transfer request on behalf of the account\'s owner</li>     <li>standing-order request on behalf of the account\'s owner</li>   </ul>   The ASPSP answers with a status of the relevant request and the subsequent Credit Transfer. <h3>Prerequisites</h3>   <ul>     <li> The TPP has been registered by the Registration Authority for the PISP role</li>     <li> The TPP was provided with an OAUTH2 "Client Credential" access token by the ASPSP (cf. § 3.4.3).</li>     <li> The TPP has previously posted a Request which has been saved by the ASPSP (cf. § 4.5.3)</li>     <ul>       <li>The ASPSP has answered with a location link to the saved Payment Request (cf. § 4.5.4)</li>       <li> The TPP has retrieved the saved request in order to get the relevant resource Ids (cf. § 4.6).</li>     </ul>     <li> The TPP and the ASPSP have successfully processed a mutual check and authentication </li>     <li> The TPP has presented its "OAUTH2 Client Credential" access token </li>   </ul> <h3>Business flow</h3>   Once the PSU has been authenticated, it is the due to the PISP to confirm the Request to the ASPSP in order to complete the process flow.<br>   In REDIRECT and DECOUPLED approach, this confirmation is not a prerequisite to the execution of the Credit Transfer.<br>   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.make_payment_request_confirmation_with_http_info(payment_request_resource_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str payment_request_resource_id: Identification of the Payment Request Resource (required)\n        :param PaymentRequestConfirmation confirmation: Data needed for confirmation of the Payment Request, especially in EMBEDDED approach \n        :return: HalPaymentRequest\n                 If the method is called asynchronously,\n                 returns the request thread.\n        ';A='confirmation';all_params=[_A,A];all_params.append(_C);all_params.append(_B);all_params.append(_G);all_params.append(_H);params=locals()
		for (key,val) in six.iteritems(params[_I]):
			if key not in all_params:raise TypeError("Got an unexpected keyword argument '%s' to method make_payment_request_confirmation"%key)
			params[key]=val
		del params[_I]
		if _A not in params or params[_A]is _E:raise ValueError('Missing the required parameter `payment_request_resource_id` when calling `make_payment_request_confirmation`')
		if _A in params and not re.search(_N,params[_A]):raise ValueError("Invalid value for parameter `payment_request_resource_id` when calling `make_payment_request_confirmation`, must conform to the pattern `/^([a-zA-Z0-9 \\/\\-?:\\()\\.,']{1,40})$/`")
		collection_formats={};path_params={}
		if _A in params:path_params[_O]=params[_A]
		query_params=[];header_params={};form_params=[];local_var_files={};body_params=_E
		if A in params:body_params=params[A]
		header_params[_K]=self.api_client.select_header_accept([_P]);header_params[_L]=self.api_client.select_header_content_type([_J]);auth_settings=[_M];return self.api_client.call_api('/payment-requests/{paymentRequestResourceId}/confirmation',_S,path_params,query_params,header_params,body=body_params,post_params=form_params,files=local_var_files,response_type=_R,auth_settings=auth_settings,async_req=params.get(_C),_return_http_data_only=params.get(_B),_preload_content=params.get(_G,_F),_request_timeout=params.get(_H),collection_formats=collection_formats)
	def modify_payment_request(self,payment_request_resource_id,payment_request,**kwargs):
		'Modification of a Payment/Transfer Request (PISP)  # noqa: E501\n\n        <h3>Description</h3> The PISP sent a Payment/Transfer Request through a POST command.<br>   The ASPSP registered the Payment/Transfer Request, updated if necessary the relevant identifiers in order to avoid duplicates and returned the location of the updated Request.<br>   The PISP got the Payment/Transfer Request that might have been updated with the resource identifiers, the status of the Payment/Transfer Request and the status of the subsequent credit transfer.<br>   The PISP request for the payment cancellation or for some payment instructions cancellation<br>   No other modification of the Payment/Transfer Request is allowed.<br/> <h3>Prerequisites</h3> <ul>   <li>The TPP was registered by the Registration Authority for the PISP role</li>   <li>The TPP was provided with an OAUTH2 "Client Credential" access token by the ASPSP (cf. § 3.4.3).</li>   <li>The TPP previously posted a Payment/Transfer Request which was saved by the ASPSP (cf. § 4.5.3)</li>   <ul>     <li>The ASPSP answered with a location link to the saved Payment/Transfer Request (cf. § 4.5.4)</li>     <li>The PISP retrieved the saved Payment/Transfer Request (cf. § 4.5.4)</li>   </ul>   <li>The TPP and the ASPSP successfully processed a mutual check and authentication </li>   <li>The TPP presented its "OAUTH2 Client Credential" access token.</li>   <li>The TPP presented the payment/transfer request.</li>   <li>The PSU was successfully authenticated.</li> </ul> <h3>Business flow</h3> the following cases can be applied: <ul>   <li>Case of a payment with multiple instructions or a standing order, the PISP asks to cancel the whole Payment/Transfer or Standing Order Request including all non-executed payment instructions by setting the [paymentInformationStatus] to "RJCT" and the relevant [statusReasonInformation] to "DS02" at payment level.</li>   <li>Case of a payment with multiple instructions, the PISP asks to cancel one or several payment instructions by setting the [transactionStatus] to "RJCT" and the relevant [statusReasonInformation] to "DS02" at each relevant instruction level.</li> </ul> Since the modification request needs a PSU authentication before committing, the modification request includes:</li>   <ul>     <li>The specification of the authentication approaches that are supported by the PISP (any combination of "REDIRECT", "EMBEDDED" and "DECOUPLED" values).</li>     <li>In case of possible REDIRECT or DECOUPLED authentication approach, one or two call-back URLs to be used by the ASPSP at the finalisation of the authentication and consent process :</li>     <ul>       <li>The first call-back URL will be called by the ASPSP if the Transfer Request is processed without any error or rejection by the PSU</li>       <li>The second call-back URL is to be used by the ASPSP in case of processing error or rejection by the PSU. Since this second URL is optional, the PISP might not provide it. In this case, the ASPSP will use the same URL for any processing result.</li>       <li>Both call-back URLS must be used in a TLS-secured request, including mutual authentication based on each party’s TLS certificate.</li>     </ul>     <li>In case of possible "EMBEDDED" or "DECOUPLED" approaches, a PSU identifier that can be processed by the ASPSP for PSU recognition.</li>   </ul>   <li>The ASPSP saves the updated Payment/Transfer Request and answers to the PISP. The answer embeds </li>   <ul>     <li>The specification of the chosen authentication approach taking into account both the PISP and the PSU capabilities.</li>     <li>In case of chosen REDIRECT authentication approach, the URL to be used by the PISP for redirecting the PSU in order to perform an authentication.</li>   </ul> </ul> <h3>Authentication flows for both use cases</h3> <h4>Redirect authentication approach </h4> When the chosen authentication approach within the ASPSP answers is set to "REDIRECT":<br> <ul>   <li>The PISP redirects the PSU to the ASPSP which authenticates the PSU </li>   <li>The ASPSP asks the PSU to give (or deny) his/her consent to the Payment Request</li>   <li>The PSU chooses or confirms which of his/her accounts shall be used by the ASPSP for the future Credit Transfer.</li>   <li>The ASPSP is then able to initiate the subsequent Credit Transfer</li>   <li>The ASPSP redirects the PSU to the PISP using one of the call-back URLs provided within the posted Payment Request</li> </ul> If the PSU neither gives nor denies his/her consent, the Payment Request shall expire and is then rejected to the PISP. The expiration delay is specified by each ASPSP.<br> <h4>Decoupled authentication approach</h4> When the chosen authentication approach is "DECOUPLED":<br> <ul>   <li>Based on the PSU identifier provided within the Payment Request by the PISP, the ASPSP gives the PSU with the Payment Request details and challenges the PSU for a Strong Customer Authentication on a decoupled device or application.</li>   <li>The PSU chooses or confirms which of his/her accounts shall be used by the ASPSP for the future Credit Transfer.</li>   <li>The ASPSP is then able to initiate the subsequent Credit Transfer</li>   <li>The ASPSP notifies the PISP about the finalisation of the authentication and consent process by using one of the call-back URLs provided within the posted Payment Request</li> </ul> If the PSU neither gives nor denies his/her consent, the Payment Request shall expire and is then rejected to the PISP. The expiration delay is specified by each ASPSP.<br> <h4>Embedded authentication approach</h4> When the chosen authentication approach within the ASPSP answers is set to "EMBEDDED":<br> <ul>   <li>The TPP informs the PSU that a challenge is needed for completing the Payment Request processing. This challenge will be one of the following:</li>   <ul>     <li>A One-Time-Password sent by the ASPSP to the PSU on a separate device or application.</li>     <li>A response computed by a specific device on base of a challenge sent by the ASPSP to the PSU on a separate device or application.</li>   </ul>   <li>The PSU unlock the device or application through a "knowledge factor" and/or an "inherence factor" (biometric), retrieves the Payment Request details and processes the data sent by the ASPSP; </li>   <li>The PSU might choose or confirm which of his/her accounts shall be used by the ASPSP for the future Credit Transfer when the device or application allows it.</li>   <li>When agreeing the Payment Request, the PSU enters the resulting authentication factor through the PISP interface which will forward it to the ASPSP through a confirmation request (cf. § 4.7)</li> </ul> Case of the PSU neither gives nor denies his/her consent, the Payment Request shall expire and is then rejected to the PISP. The expiration delay is specified by each ASPSP.<br>   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.modify_payment_request(payment_request_resource_id, payment_request, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str payment_request_resource_id: Identification of the Payment Request Resource (required)\n        :param PaymentRequestResource payment_request: ISO20022 based payment Initiation Request (required)\n        :return: HalPaymentRequestCreation\n                 If the method is called asynchronously,\n                 returns the request thread.\n        ';kwargs[_B]=_F
		if kwargs.get(_C):return self.modify_payment_request_with_http_info(payment_request_resource_id,payment_request,**kwargs)
		else:data=self.modify_payment_request_with_http_info(payment_request_resource_id,payment_request,**kwargs);return data
	def modify_payment_request_with_http_info(self,payment_request_resource_id,payment_request,**kwargs):
		'Modification of a Payment/Transfer Request (PISP)  # noqa: E501\n\n        <h3>Description</h3> The PISP sent a Payment/Transfer Request through a POST command.<br>   The ASPSP registered the Payment/Transfer Request, updated if necessary the relevant identifiers in order to avoid duplicates and returned the location of the updated Request.<br>   The PISP got the Payment/Transfer Request that might have been updated with the resource identifiers, the status of the Payment/Transfer Request and the status of the subsequent credit transfer.<br>   The PISP request for the payment cancellation or for some payment instructions cancellation<br>   No other modification of the Payment/Transfer Request is allowed.<br/> <h3>Prerequisites</h3> <ul>   <li>The TPP was registered by the Registration Authority for the PISP role</li>   <li>The TPP was provided with an OAUTH2 "Client Credential" access token by the ASPSP (cf. § 3.4.3).</li>   <li>The TPP previously posted a Payment/Transfer Request which was saved by the ASPSP (cf. § 4.5.3)</li>   <ul>     <li>The ASPSP answered with a location link to the saved Payment/Transfer Request (cf. § 4.5.4)</li>     <li>The PISP retrieved the saved Payment/Transfer Request (cf. § 4.5.4)</li>   </ul>   <li>The TPP and the ASPSP successfully processed a mutual check and authentication </li>   <li>The TPP presented its "OAUTH2 Client Credential" access token.</li>   <li>The TPP presented the payment/transfer request.</li>   <li>The PSU was successfully authenticated.</li> </ul> <h3>Business flow</h3> the following cases can be applied: <ul>   <li>Case of a payment with multiple instructions or a standing order, the PISP asks to cancel the whole Payment/Transfer or Standing Order Request including all non-executed payment instructions by setting the [paymentInformationStatus] to "RJCT" and the relevant [statusReasonInformation] to "DS02" at payment level.</li>   <li>Case of a payment with multiple instructions, the PISP asks to cancel one or several payment instructions by setting the [transactionStatus] to "RJCT" and the relevant [statusReasonInformation] to "DS02" at each relevant instruction level.</li> </ul> Since the modification request needs a PSU authentication before committing, the modification request includes:</li>   <ul>     <li>The specification of the authentication approaches that are supported by the PISP (any combination of "REDIRECT", "EMBEDDED" and "DECOUPLED" values).</li>     <li>In case of possible REDIRECT or DECOUPLED authentication approach, one or two call-back URLs to be used by the ASPSP at the finalisation of the authentication and consent process :</li>     <ul>       <li>The first call-back URL will be called by the ASPSP if the Transfer Request is processed without any error or rejection by the PSU</li>       <li>The second call-back URL is to be used by the ASPSP in case of processing error or rejection by the PSU. Since this second URL is optional, the PISP might not provide it. In this case, the ASPSP will use the same URL for any processing result.</li>       <li>Both call-back URLS must be used in a TLS-secured request, including mutual authentication based on each party’s TLS certificate.</li>     </ul>     <li>In case of possible "EMBEDDED" or "DECOUPLED" approaches, a PSU identifier that can be processed by the ASPSP for PSU recognition.</li>   </ul>   <li>The ASPSP saves the updated Payment/Transfer Request and answers to the PISP. The answer embeds </li>   <ul>     <li>The specification of the chosen authentication approach taking into account both the PISP and the PSU capabilities.</li>     <li>In case of chosen REDIRECT authentication approach, the URL to be used by the PISP for redirecting the PSU in order to perform an authentication.</li>   </ul> </ul> <h3>Authentication flows for both use cases</h3> <h4>Redirect authentication approach </h4> When the chosen authentication approach within the ASPSP answers is set to "REDIRECT":<br> <ul>   <li>The PISP redirects the PSU to the ASPSP which authenticates the PSU </li>   <li>The ASPSP asks the PSU to give (or deny) his/her consent to the Payment Request</li>   <li>The PSU chooses or confirms which of his/her accounts shall be used by the ASPSP for the future Credit Transfer.</li>   <li>The ASPSP is then able to initiate the subsequent Credit Transfer</li>   <li>The ASPSP redirects the PSU to the PISP using one of the call-back URLs provided within the posted Payment Request</li> </ul> If the PSU neither gives nor denies his/her consent, the Payment Request shall expire and is then rejected to the PISP. The expiration delay is specified by each ASPSP.<br> <h4>Decoupled authentication approach</h4> When the chosen authentication approach is "DECOUPLED":<br> <ul>   <li>Based on the PSU identifier provided within the Payment Request by the PISP, the ASPSP gives the PSU with the Payment Request details and challenges the PSU for a Strong Customer Authentication on a decoupled device or application.</li>   <li>The PSU chooses or confirms which of his/her accounts shall be used by the ASPSP for the future Credit Transfer.</li>   <li>The ASPSP is then able to initiate the subsequent Credit Transfer</li>   <li>The ASPSP notifies the PISP about the finalisation of the authentication and consent process by using one of the call-back URLs provided within the posted Payment Request</li> </ul> If the PSU neither gives nor denies his/her consent, the Payment Request shall expire and is then rejected to the PISP. The expiration delay is specified by each ASPSP.<br> <h4>Embedded authentication approach</h4> When the chosen authentication approach within the ASPSP answers is set to "EMBEDDED":<br> <ul>   <li>The TPP informs the PSU that a challenge is needed for completing the Payment Request processing. This challenge will be one of the following:</li>   <ul>     <li>A One-Time-Password sent by the ASPSP to the PSU on a separate device or application.</li>     <li>A response computed by a specific device on base of a challenge sent by the ASPSP to the PSU on a separate device or application.</li>   </ul>   <li>The PSU unlock the device or application through a "knowledge factor" and/or an "inherence factor" (biometric), retrieves the Payment Request details and processes the data sent by the ASPSP; </li>   <li>The PSU might choose or confirm which of his/her accounts shall be used by the ASPSP for the future Credit Transfer when the device or application allows it.</li>   <li>When agreeing the Payment Request, the PSU enters the resulting authentication factor through the PISP interface which will forward it to the ASPSP through a confirmation request (cf. § 4.7)</li> </ul> Case of the PSU neither gives nor denies his/her consent, the Payment Request shall expire and is then rejected to the PISP. The expiration delay is specified by each ASPSP.<br>   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.modify_payment_request_with_http_info(payment_request_resource_id, payment_request, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str payment_request_resource_id: Identification of the Payment Request Resource (required)\n        :param PaymentRequestResource payment_request: ISO20022 based payment Initiation Request (required)\n        :return: HalPaymentRequestCreation\n                 If the method is called asynchronously,\n                 returns the request thread.\n        ';all_params=[_A,_D];all_params.append(_C);all_params.append(_B);all_params.append(_G);all_params.append(_H);params=locals()
		for (key,val) in six.iteritems(params[_I]):
			if key not in all_params:raise TypeError("Got an unexpected keyword argument '%s' to method modify_payment_request"%key)
			params[key]=val
		del params[_I]
		if _A not in params or params[_A]is _E:raise ValueError('Missing the required parameter `payment_request_resource_id` when calling `modify_payment_request`')
		if _D not in params or params[_D]is _E:raise ValueError('Missing the required parameter `payment_request` when calling `modify_payment_request`')
		if _A in params and not re.search(_N,params[_A]):raise ValueError("Invalid value for parameter `payment_request_resource_id` when calling `modify_payment_request`, must conform to the pattern `/^([a-zA-Z0-9 \\/\\-?:\\()\\.,']{1,40})$/`")
		collection_formats={};path_params={}
		if _A in params:path_params[_O]=params[_A]
		query_params=[];header_params={};form_params=[];local_var_files={};body_params=_E
		if _D in params:body_params=params[_D]
		header_params[_K]=self.api_client.select_header_accept([_J]);header_params[_L]=self.api_client.select_header_content_type([_J]);auth_settings=[_M];return self.api_client.call_api(_Q,'PUT',path_params,query_params,header_params,body=body_params,post_params=form_params,files=local_var_files,response_type=_T,auth_settings=auth_settings,async_req=params.get(_C),_return_http_data_only=params.get(_B),_preload_content=params.get(_G,_F),_request_timeout=params.get(_H),collection_formats=collection_formats)