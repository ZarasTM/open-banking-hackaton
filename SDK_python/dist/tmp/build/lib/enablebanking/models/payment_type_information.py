'\n    enable:Banking SDK\n\n    Currently enable:Banking SDK consists of [authorization](#auth-api), [account information](#aisp-api) and [payment initiation](#pisp-api) APIs. The same calls and data structures are used for interacting with different banks. In order to use each of the APIs corresponding API instance needs to be created with bank specific settings.  enable:Banking SDK API is based on [STET PSD2 specification](https://www.stet.eu/en/psd2/).  This API intends to provide an interface for Third Party Providers (TPP) for accessing Account Servicing Payment Service Providers (ASPSP, i.e. banks).  TPP may act as Account Information Service Provider (AISP), Payment Initiation Service Providers (PISP) or both.  The Payment Service User (PSU) is the owner of the accounts held by the ASPSP and gives accreditations to the TPP in order to access his accounts information or initiates payment from these accounts.   # noqa: E501\n\n    API version: 0.3.0\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_E='category_purpose'
_D='local_instrument'
_C='service_level'
_B='instruction_priority'
_A=None
import pprint,re,six
from enablebanking.models.category_purpose_code import CategoryPurposeCode
from enablebanking.models.local_instrument_code import LocalInstrumentCode
from enablebanking.models.priority_code import PriorityCode
from enablebanking.models.service_level_code import ServiceLevelCode
class PaymentTypeInformation:
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_B:'PriorityCode',_C:'ServiceLevelCode',_D:'LocalInstrumentCode',_E:'CategoryPurposeCode'};attribute_map={_B:'instructionPriority',_C:'serviceLevel',_D:'localInstrument',_E:'categoryPurpose'}
	def __init__(A,instruction_priority=_A,service_level=_A,local_instrument=_A,category_purpose=_A):
		'PaymentTypeInformation - a model defined in Swagger';E=category_purpose;D=local_instrument;C=service_level;B=instruction_priority;A._instruction_priority=_A;A._service_level=_A;A._local_instrument=_A;A._category_purpose=_A;A.discriminator=_A
		if B is not _A:A.instruction_priority=B
		if C is not _A:A.service_level=C
		if D is not _A:A.local_instrument=D
		if E is not _A:A.category_purpose=E
	@property
	def instruction_priority(self):'Gets the instruction_priority of this PaymentTypeInformation.  # noqa: E501\n\n\n        :return: The instruction_priority of this PaymentTypeInformation.  # noqa: E501\n        :rtype: PriorityCode\n        ';return self._instruction_priority
	@instruction_priority.setter
	def instruction_priority(self,instruction_priority):'Sets the instruction_priority of this PaymentTypeInformation.\n\n\n        :param instruction_priority: The instruction_priority of this PaymentTypeInformation.  # noqa: E501\n        :type: PriorityCode\n        ';self._instruction_priority=instruction_priority
	@property
	def service_level(self):'Gets the service_level of this PaymentTypeInformation.  # noqa: E501\n\n\n        :return: The service_level of this PaymentTypeInformation.  # noqa: E501\n        :rtype: ServiceLevelCode\n        ';return self._service_level
	@service_level.setter
	def service_level(self,service_level):'Sets the service_level of this PaymentTypeInformation.\n\n\n        :param service_level: The service_level of this PaymentTypeInformation.  # noqa: E501\n        :type: ServiceLevelCode\n        ';self._service_level=service_level
	@property
	def local_instrument(self):'Gets the local_instrument of this PaymentTypeInformation.  # noqa: E501\n\n\n        :return: The local_instrument of this PaymentTypeInformation.  # noqa: E501\n        :rtype: LocalInstrumentCode\n        ';return self._local_instrument
	@local_instrument.setter
	def local_instrument(self,local_instrument):'Sets the local_instrument of this PaymentTypeInformation.\n\n\n        :param local_instrument: The local_instrument of this PaymentTypeInformation.  # noqa: E501\n        :type: LocalInstrumentCode\n        ';self._local_instrument=local_instrument
	@property
	def category_purpose(self):'Gets the category_purpose of this PaymentTypeInformation.  # noqa: E501\n\n\n        :return: The category_purpose of this PaymentTypeInformation.  # noqa: E501\n        :rtype: CategoryPurposeCode\n        ';return self._category_purpose
	@category_purpose.setter
	def category_purpose(self,category_purpose):'Sets the category_purpose of this PaymentTypeInformation.\n\n\n        :param category_purpose: The category_purpose of this PaymentTypeInformation.  # noqa: E501\n        :type: CategoryPurposeCode\n        ';self._category_purpose=category_purpose
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in six.iteritems(D.swagger_types):
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(PaymentTypeInformation,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,PaymentTypeInformation):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other