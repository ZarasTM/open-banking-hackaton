'\n    enable:Banking SDK\n\n    Currently enable:Banking SDK consists of [authorization](#auth-api), [account information](#aisp-api) and [payment initiation](#pisp-api) APIs. The same calls and data structures are used for interacting with different banks. In order to use each of the APIs corresponding API instance needs to be created with bank specific settings.  enable:Banking SDK API is based on [STET PSD2 specification](https://www.stet.eu/en/psd2/).  This API intends to provide an interface for Third Party Providers (TPP) for accessing Account Servicing Payment Service Providers (ASPSP, i.e. banks).  TPP may act as Account Information Service Provider (AISP), Payment Initiation Service Providers (PISP) or both.  The Payment Service User (PSU) is the owner of the accounts held by the ASPSP and gives accreditations to the TPP in order to access his accounts information or initiates payment from these accounts.   # noqa: E501\n\n    API version: 0.3.0\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_F='str'
_E='postal_address'
_D='clearing_system_member_id'
_C='bic_fi'
_B='name'
_A=None
import pprint,re,six
from enablebanking.models.clearing_system_member_identification import ClearingSystemMemberIdentification
from enablebanking.models.postal_address import PostalAddress
class FinancialInstitutionIdentification:
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_C:_F,_D:'ClearingSystemMemberIdentification',_B:_F,_E:'PostalAddress'};attribute_map={_C:'bicFi',_D:'clearingSystemMemberId',_B:_B,_E:'postalAddress'}
	def __init__(A,bic_fi=_A,clearing_system_member_id=_A,name=_A,postal_address=_A):
		'FinancialInstitutionIdentification - a model defined in Swagger';C=postal_address;B=clearing_system_member_id;A._bic_fi=_A;A._clearing_system_member_id=_A;A._name=_A;A._postal_address=_A;A.discriminator=_A;A.bic_fi=bic_fi
		if B is not _A:A.clearing_system_member_id=B
		if name is not _A:A.name=name
		if C is not _A:A.postal_address=C
	@property
	def bic_fi(self):'Gets the bic_fi of this FinancialInstitutionIdentification.  # noqa: E501\n\n        ISO20022: Code allocated to a financial institution by the ISO 9362 Registration Authority as described in ISO 9362 "Banking - Banking telecommunication messages - Business identification code (BIC)".   # noqa: E501\n\n        :return: The bic_fi of this FinancialInstitutionIdentification.  # noqa: E501\n        :rtype: str\n        ';return self._bic_fi
	@bic_fi.setter
	def bic_fi(self,bic_fi):
		'Sets the bic_fi of this FinancialInstitutionIdentification.\n\n        ISO20022: Code allocated to a financial institution by the ISO 9362 Registration Authority as described in ISO 9362 "Banking - Banking telecommunication messages - Business identification code (BIC)".   # noqa: E501\n\n        :param bic_fi: The bic_fi of this FinancialInstitutionIdentification.  # noqa: E501\n        :type: str\n        ';A=bic_fi
		if A is _A:raise ValueError('Invalid value for `bic_fi`, must not be `None`')
		if A is not _A and not re.search('^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}$',A):raise ValueError('Invalid value for `bic_fi`, must be a follow pattern or equal to `/^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}$/`')
		self._bic_fi=A
	@property
	def clearing_system_member_id(self):'Gets the clearing_system_member_id of this FinancialInstitutionIdentification.  # noqa: E501\n\n\n        :return: The clearing_system_member_id of this FinancialInstitutionIdentification.  # noqa: E501\n        :rtype: ClearingSystemMemberIdentification\n        ';return self._clearing_system_member_id
	@clearing_system_member_id.setter
	def clearing_system_member_id(self,clearing_system_member_id):'Sets the clearing_system_member_id of this FinancialInstitutionIdentification.\n\n\n        :param clearing_system_member_id: The clearing_system_member_id of this FinancialInstitutionIdentification.  # noqa: E501\n        :type: ClearingSystemMemberIdentification\n        ';self._clearing_system_member_id=clearing_system_member_id
	@property
	def name(self):'Gets the name of this FinancialInstitutionIdentification.  # noqa: E501\n\n        Name of the financial institution  # noqa: E501\n\n        :return: The name of this FinancialInstitutionIdentification.  # noqa: E501\n        :rtype: str\n        ';return self._name
	@name.setter
	def name(self,name):
		'Sets the name of this FinancialInstitutionIdentification.\n\n        Name of the financial institution  # noqa: E501\n\n        :param name: The name of this FinancialInstitutionIdentification.  # noqa: E501\n        :type: str\n        ';A=name
		if A is not _A and len(A)>140:raise ValueError('Invalid value for `name`, length must be less than or equal to `140`')
		self._name=A
	@property
	def postal_address(self):'Gets the postal_address of this FinancialInstitutionIdentification.  # noqa: E501\n\n\n        :return: The postal_address of this FinancialInstitutionIdentification.  # noqa: E501\n        :rtype: PostalAddress\n        ';return self._postal_address
	@postal_address.setter
	def postal_address(self,postal_address):'Sets the postal_address of this FinancialInstitutionIdentification.\n\n\n        :param postal_address: The postal_address of this FinancialInstitutionIdentification.  # noqa: E501\n        :type: PostalAddress\n        ';self._postal_address=postal_address
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in six.iteritems(D.swagger_types):
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(FinancialInstitutionIdentification,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,FinancialInstitutionIdentification):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other