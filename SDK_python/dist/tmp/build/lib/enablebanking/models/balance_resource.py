'\n    enable:Banking SDK\n\n    Currently enable:Banking SDK consists of [authorization](#auth-api), [account information](#aisp-api) and [payment initiation](#pisp-api) APIs. The same calls and data structures are used for interacting with different banks. In order to use each of the APIs corresponding API instance needs to be created with bank specific settings.  enable:Banking SDK API is based on [STET PSD2 specification](https://www.stet.eu/en/psd2/).  This API intends to provide an interface for Third Party Providers (TPP) for accessing Account Servicing Payment Service Providers (ASPSP, i.e. banks).  TPP may act as Account Information Service Provider (AISP), Payment Initiation Service Providers (PISP) or both.  The Payment Service User (PSU) is the owner of the accounts held by the ASPSP and gives accreditations to the TPP in order to access his accounts information or initiates payment from these accounts.   # noqa: E501\n\n    API version: 0.3.0\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_H='str'
_G='last_committed_transaction'
_F='reference_date'
_E='last_change_date_time'
_D='balance_type'
_C='balance_amount'
_B='name'
_A=None
import pprint,re,six
from enablebanking.models.amount_type import AmountType
from enablebanking.models.balance_status import BalanceStatus
class BalanceResource:
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_B:_H,_C:'AmountType',_D:'BalanceStatus',_E:'datetime',_F:'date',_G:_H};attribute_map={_B:_B,_C:'balanceAmount',_D:'balanceType',_E:'lastChangeDateTime',_F:'referenceDate',_G:'lastCommittedTransaction'}
	def __init__(A,name=_A,balance_amount=_A,balance_type=_A,last_change_date_time=_A,reference_date=_A,last_committed_transaction=_A):
		'BalanceResource - a model defined in Swagger';D=last_committed_transaction;C=reference_date;B=last_change_date_time;A._name=_A;A._balance_amount=_A;A._balance_type=_A;A._last_change_date_time=_A;A._reference_date=_A;A._last_committed_transaction=_A;A.discriminator=_A;A.name=name;A.balance_amount=balance_amount;A.balance_type=balance_type
		if B is not _A:A.last_change_date_time=B
		if C is not _A:A.reference_date=C
		if D is not _A:A.last_committed_transaction=D
	@property
	def name(self):'Gets the name of this BalanceResource.  # noqa: E501\n\n        Label of the balance  # noqa: E501\n\n        :return: The name of this BalanceResource.  # noqa: E501\n        :rtype: str\n        ';return self._name
	@name.setter
	def name(self,name):
		'Sets the name of this BalanceResource.\n\n        Label of the balance  # noqa: E501\n\n        :param name: The name of this BalanceResource.  # noqa: E501\n        :type: str\n        ';A=name
		if A is _A:raise ValueError('Invalid value for `name`, must not be `None`')
		if A is not _A and len(A)>70:raise ValueError('Invalid value for `name`, length must be less than or equal to `70`')
		self._name=A
	@property
	def balance_amount(self):'Gets the balance_amount of this BalanceResource.  # noqa: E501\n\n\n        :return: The balance_amount of this BalanceResource.  # noqa: E501\n        :rtype: AmountType\n        ';return self._balance_amount
	@balance_amount.setter
	def balance_amount(self,balance_amount):
		'Sets the balance_amount of this BalanceResource.\n\n\n        :param balance_amount: The balance_amount of this BalanceResource.  # noqa: E501\n        :type: AmountType\n        ';A=balance_amount
		if A is _A:raise ValueError('Invalid value for `balance_amount`, must not be `None`')
		self._balance_amount=A
	@property
	def balance_type(self):'Gets the balance_type of this BalanceResource.  # noqa: E501\n\n\n        :return: The balance_type of this BalanceResource.  # noqa: E501\n        :rtype: BalanceStatus\n        ';return self._balance_type
	@balance_type.setter
	def balance_type(self,balance_type):
		'Sets the balance_type of this BalanceResource.\n\n\n        :param balance_type: The balance_type of this BalanceResource.  # noqa: E501\n        :type: BalanceStatus\n        ';A=balance_type
		if A is _A:raise ValueError('Invalid value for `balance_type`, must not be `None`')
		self._balance_type=A
	@property
	def last_change_date_time(self):'Gets the last_change_date_time of this BalanceResource.  # noqa: E501\n\n        Timestamp of the last change of the balance amount  # noqa: E501\n\n        :return: The last_change_date_time of this BalanceResource.  # noqa: E501\n        :rtype: datetime\n        ';return self._last_change_date_time
	@last_change_date_time.setter
	def last_change_date_time(self,last_change_date_time):'Sets the last_change_date_time of this BalanceResource.\n\n        Timestamp of the last change of the balance amount  # noqa: E501\n\n        :param last_change_date_time: The last_change_date_time of this BalanceResource.  # noqa: E501\n        :type: datetime\n        ';self._last_change_date_time=last_change_date_time
	@property
	def reference_date(self):'Gets the reference_date of this BalanceResource.  # noqa: E501\n\n        Reference date for the balance  # noqa: E501\n\n        :return: The reference_date of this BalanceResource.  # noqa: E501\n        :rtype: date\n        ';return self._reference_date
	@reference_date.setter
	def reference_date(self,reference_date):'Sets the reference_date of this BalanceResource.\n\n        Reference date for the balance  # noqa: E501\n\n        :param reference_date: The reference_date of this BalanceResource.  # noqa: E501\n        :type: date\n        ';self._reference_date=reference_date
	@property
	def last_committed_transaction(self):'Gets the last_committed_transaction of this BalanceResource.  # noqa: E501\n\n        Identification of the last committed transaction. This is actually useful for instant balance.   # noqa: E501\n\n        :return: The last_committed_transaction of this BalanceResource.  # noqa: E501\n        :rtype: str\n        ';return self._last_committed_transaction
	@last_committed_transaction.setter
	def last_committed_transaction(self,last_committed_transaction):
		'Sets the last_committed_transaction of this BalanceResource.\n\n        Identification of the last committed transaction. This is actually useful for instant balance.   # noqa: E501\n\n        :param last_committed_transaction: The last_committed_transaction of this BalanceResource.  # noqa: E501\n        :type: str\n        ';A=last_committed_transaction
		if A is not _A and len(A)>40:raise ValueError('Invalid value for `last_committed_transaction`, length must be less than or equal to `40`')
		self._last_committed_transaction=A
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in six.iteritems(D.swagger_types):
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(BalanceResource,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,BalanceResource):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other