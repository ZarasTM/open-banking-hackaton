'\n    enable:Banking SDK\n\n    Currently enable:Banking SDK consists of [authorization](#auth-api), [account information](#aisp-api) and [payment initiation](#pisp-api) APIs. The same calls and data structures are used for interacting with different banks. In order to use each of the APIs corresponding API instance needs to be created with bank specific settings.  enable:Banking SDK API is based on [STET PSD2 specification](https://www.stet.eu/en/psd2/).  This API intends to provide an interface for Third Party Providers (TPP) for accessing Account Servicing Payment Service Providers (ASPSP, i.e. banks).  TPP may act as Account Information Service Provider (AISP), Payment Initiation Service Providers (PISP) or both.  The Payment Service User (PSU) is the owner of the accounts held by the ASPSP and gives accreditations to the TPP in order to access his accounts information or initiates payment from these accounts.   # noqa: E501\n\n    API version: 0.3.0\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_F="^([a-zA-Z0-9 \\/\\-?:\\()\\.,']{1,35})$"
_E='str'
_D='end_to_end_id'
_C='instruction_id'
_B='resource_id'
_A=None
import pprint,re,six
from enablebanking.models.resource_id import ResourceId
class PaymentIdentification:
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_B:'ResourceId',_C:_E,_D:_E};attribute_map={_B:'resourceId',_C:'instructionId',_D:'endToEndId'}
	def __init__(A,resource_id=_A,instruction_id=_A,end_to_end_id=_A):
		'PaymentIdentification - a model defined in Swagger';D=end_to_end_id;C=instruction_id;B=resource_id;A._resource_id=_A;A._instruction_id=_A;A._end_to_end_id=_A;A.discriminator=_A
		if B is not _A:A.resource_id=B
		if C is not _A:A.instruction_id=C
		if D is not _A:A.end_to_end_id=D
	@property
	def resource_id(self):'Gets the resource_id of this PaymentIdentification.  # noqa: E501\n\n\n        :return: The resource_id of this PaymentIdentification.  # noqa: E501\n        :rtype: ResourceId\n        ';return self._resource_id
	@resource_id.setter
	def resource_id(self,resource_id):'Sets the resource_id of this PaymentIdentification.\n\n\n        :param resource_id: The resource_id of this PaymentIdentification.  # noqa: E501\n        :type: ResourceId\n        ';self._resource_id=resource_id
	@property
	def instruction_id(self):'Gets the instruction_id of this PaymentIdentification.  # noqa: E501\n\n        ISO20022: Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.  API: Unique identification shared between the PISP and the ASPSP   # noqa: E501\n\n        :return: The instruction_id of this PaymentIdentification.  # noqa: E501\n        :rtype: str\n        ';return self._instruction_id
	@instruction_id.setter
	def instruction_id(self,instruction_id):
		'Sets the instruction_id of this PaymentIdentification.\n\n        ISO20022: Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.  API: Unique identification shared between the PISP and the ASPSP   # noqa: E501\n\n        :param instruction_id: The instruction_id of this PaymentIdentification.  # noqa: E501\n        :type: str\n        ';A=instruction_id
		if A is not _A and not re.search(_F,A):raise ValueError("Invalid value for `instruction_id`, must be a follow pattern or equal to `/^([a-zA-Z0-9 \\/\\\\-?:\\\\()\\\\.,']{1,35})$/`")
		self._instruction_id=A
	@property
	def end_to_end_id(self):'Gets the end_to_end_id of this PaymentIdentification.  # noqa: E501\n\n        ISO20022: Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.  API: Unique identification shared between the merchant and the PSU   # noqa: E501\n\n        :return: The end_to_end_id of this PaymentIdentification.  # noqa: E501\n        :rtype: str\n        ';return self._end_to_end_id
	@end_to_end_id.setter
	def end_to_end_id(self,end_to_end_id):
		'Sets the end_to_end_id of this PaymentIdentification.\n\n        ISO20022: Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.  API: Unique identification shared between the merchant and the PSU   # noqa: E501\n\n        :param end_to_end_id: The end_to_end_id of this PaymentIdentification.  # noqa: E501\n        :type: str\n        ';A=end_to_end_id
		if A is not _A and not re.search(_F,A):raise ValueError("Invalid value for `end_to_end_id`, must be a follow pattern or equal to `/^([a-zA-Z0-9 \\/\\\\-?:\\\\()\\\\.,']{1,35})$/`")
		self._end_to_end_id=A
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in six.iteritems(D.swagger_types):
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(PaymentIdentification,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,PaymentIdentification):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other