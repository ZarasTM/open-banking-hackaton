'\n    enable:Banking SDK\n\n    Currently enable:Banking SDK consists of [authorization](#auth-api), [account information](#aisp-api) and [payment initiation](#pisp-api) APIs. The same calls and data structures are used for interacting with different banks. In order to use each of the APIs corresponding API instance needs to be created with bank specific settings.  enable:Banking SDK API is based on [STET PSD2 specification](https://www.stet.eu/en/psd2/).  This API intends to provide an interface for Third Party Providers (TPP) for accessing Account Servicing Payment Service Providers (ASPSP, i.e. banks).  TPP may act as Account Information Service Provider (AISP), Payment Initiation Service Providers (PISP) or both.  The Payment Service User (PSU) is the owner of the accounts held by the ASPSP and gives accreditations to the TPP in order to access his accounts information or initiates payment from these accounts.   # noqa: E501\n\n    API version: 0.3.0\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
from __future__ import absolute_import
_C='User-Agent'
_B='application/json'
_A=None
import datetime,decimal,json,mimetypes
from multiprocessing.pool import ThreadPool
import os,re,tempfile,six
from six.moves.urllib.parse import quote
from enablebanking.configuration import Configuration
import enablebanking.models
from enablebanking import eb_core
from enablebanking.eb.platform import Platform
class ApiException(Exception):0
from enablebanking.eb import exception
class DictProxy:
	def __init__(A,d):A.d=d
	def __getattr__(A,key):
		try:B=A.d[key]
		except KeyError as C:raise AttributeError("no attribute '%s'"%key)
		return proxyDict(B)
	def __iter__(A):return six.iteritems(A.d)
def proxyDict(v):
	if isinstance(v,dict):return DictProxy(v)
	return v
class ApiClient:
	'Generic API client for Swagger client library builds.\n\n    NOTE: This class is auto generated by the swagger code generator program.\n    Ref: https://github.com/swagger-api/swagger-codegen\n    Do not edit the class manually.\n\n    :param connector_module: name of the connector.\n    :param configuration: .Configuration object for this client\n    ';PRIMITIVE_TYPES=(float,bool,bytes,six.text_type)+six.integer_types;NATIVE_TYPES_MAPPING={'int':int,'long':int if six.PY3 else long,'float':float,'str':str,'bool':bool,'date':datetime.date,'datetime':datetime.datetime,'object':object,'Decimal':decimal.Decimal}
	def __init__(A,connector_module=_A,connector_settings=_A,configuration=_A,platform=_A):
		E=connector_settings;D=connector_module;C=platform;B=configuration
		if B is _A:B=Configuration()
		A.configuration=B
		if C is _A:C=Platform()
		A.platform=C;A.pool=ThreadPool();A.default_headers={};A.user_agent='enable:Banking/0.3.0/python'
		if D is _A:A.connector=eb_core.eb_Meta()
		else:
			F=getattr(eb_core,'eb_connectors_{}Connector'.format(D))
			if E is _A:A.connector=F(A.platform)
			else:A.connector=F(A.platform,**E)
	def __del__(A):A.pool.close();A.pool.join()
	@property
	def user_agent(self):'User agent for this API client';return self.default_headers[_C]
	@user_agent.setter
	def user_agent(self,value):self.default_headers[_C]=value
	def set_default_header(A,header_name,header_value):A.default_headers[header_name]=header_value
	def __call_api(A,resource_path,method,path_params=_A,query_params=_A,header_params=_A,body=_A,post_params=_A,files=_A,response_type=_A,auth_settings=_A,_return_http_data_only=_A,collection_formats=_A,_preload_content=True,_request_timeout=_A):
		L=response_type;K=files;J=body;G=collection_formats;F=query_params;E=path_params;C=post_params;B=header_params;P=A.configuration;B=B or{};B.update(A.default_headers)
		if B:B=A.sanitize_for_serialization(B);B=dict(A.parameters_to_tuples(B,G))
		if E:E=A.sanitize_for_serialization(E);E=A.parameters_to_tuples(E,G)
		if F:F=A.sanitize_for_serialization(F);F=A.parameters_to_tuples(F,G)
		if C or K:C=A.prepare_post_parameters(C,K);C=A.sanitize_for_serialization(C);C=A.parameters_to_tuples(C,G)
		H=eb_core.eb_ResourceParam;M=eb_core.eb_ResourceData(pathParams=[H(A,B)for(A,B)in E],queryParams=[H(A,B)for(A,B)in F],headerParams=[H(A,C)for(A,C)in(B.items())],postParams=[H(A,B)for(A,B)in C],body=A.sanitize_for_serialization(J)if J else J);D=_A
		def N(r):
			if r.error:
				B=getattr(r.error,'status',_A);A=getattr(r.error,'message',_A)
				if A is _A:A=str(r.error)
				if isinstance(r.error,eb_core.eb_HttpError):
					C=getattr(r.error,'apiResponse',_A)
					if isinstance(r.error,eb_core.eb_InsufficientScopeError):raise exception.InsufficientScopeException(B,A,C)
					if isinstance(r.error,eb_core.eb_DataRetrievalError):raise exception.DataRetrievalException(B,A,C)
					raise exception.HttpException(B,A,C)
				if isinstance(r.error,eb_core.eb_NotImplementedError):raise exception.NotImplementedException(B,A)
				raise exception.CoreException(B,A)
			nonlocal D;D=r
		try:A.connector.dispatch(resource_path,method,M,N)
		except eb_core._HxException as O:raise O.val
		A.last_response=D;I=D
		if _preload_content:
			if L:I=A.deserialize(D,L)
			else:I=_A
		if _return_http_data_only:return I
		else:return I,D.status,D.getheaders()
	def sanitize_for_serialization(B,obj):
		'Builds a JSON POST object.\n\n        If obj is None, return None.\n        If obj is str, int, long, float, bool, return directly.\n        If obj is datetime.datetime, datetime.date\n            convert to string in iso8601 format.\n        If obj is list, sanitize each element in the list.\n        If obj is dict, return the dict.\n        If obj is swagger model, return the properties dict.\n\n        :param obj: The data to serialize.\n        :return: The serialized form of data.\n        ';A=obj
		if A is _A:return _A
		elif isinstance(A,B.PRIMITIVE_TYPES):return A
		elif isinstance(A,list):return[B.sanitize_for_serialization(C)for C in A]
		elif isinstance(A,tuple):return tuple((B.sanitize_for_serialization(C)for C in A))
		elif isinstance(A,(datetime.datetime,datetime.date)):return A.isoformat()
		elif isinstance(A,decimal.Decimal):return str(A)
		if isinstance(A,dict):C=A
		else:C={A.attribute_map[B]:getattr(A,B)for(B,C)in(six.iteritems(A.swagger_types))if(getattr(A,B)is not _A)}
		return proxyDict({A:B.sanitize_for_serialization(D)for(A,D)in(six.iteritems(C))})
	def deserialize(A,response,response_type):
		'Deserializes response into an object.\n\n        :param response: RESTResponse object to be deserialized.\n        :param response_type: class literal for\n            deserialized object, or string of class name.\n\n        :return: deserialized object.\n        ';C=response_type;B=response
		if C=='file':return A.__deserialize_file(B)
		D=B.data;return A.__deserialize(D,C)
	def __deserialize(B,data,klass):
		'Deserializes dict, list, str into an object.\n\n        :param data: dict, list or str.\n        :param klass: class literal, or string of class name.\n\n        :return: object.\n        ';C=data;A=klass
		if C is _A:return _A
		if type(A)==str:
			if A.startswith('list['):D=re.match('list\\[(.*)\\]',A).group(1);return[B.__deserialize(A,D)for A in C]
			if A.startswith('dict('):D=re.match('dict\\(([^,]*), (.*)\\)',A).group(2);return{A:B.__deserialize(E,D)for(A,E)in(six.iteritems(C))}
			if A in B.NATIVE_TYPES_MAPPING:A=B.NATIVE_TYPES_MAPPING[A]
			else:A=getattr(enablebanking.models,A)
		if A in B.PRIMITIVE_TYPES:return B.__deserialize_primitive(C,A)
		elif A==object:return B.__deserialize_object(C)
		elif A==datetime.date:return B.__deserialize_date(C)
		elif A==datetime.datetime:return B.__deserialize_datatime(C)
		elif A==decimal.Decimal:return decimal.Decimal(C)
		else:return B.__deserialize_model(C,A)
	def call_api(A,resource_path,method,path_params=_A,query_params=_A,header_params=_A,body=_A,post_params=_A,files=_A,response_type=_A,auth_settings=_A,async_req=_A,_return_http_data_only=_A,collection_formats=_A,_preload_content=True,_request_timeout=_A):
		'Makes the HTTP request (synchronous) and returns deserialized data.\n\n        To make an async request, set the async_req parameter.\n\n        :param resource_path: Path to method endpoint.\n        :param method: Method to call.\n        :param path_params: Path parameters in the url.\n        :param query_params: Query parameters in the url.\n        :param header_params: Header parameters to be\n            placed in the request header.\n        :param body: Request body.\n        :param post_params dict: Request post form parameters,\n            for `application/x-www-form-urlencoded`, `multipart/form-data`.\n        :param auth_settings list: Auth Settings names for the request.\n        :param response: Response data type.\n        :param files dict: key -> filename, value -> filepath,\n            for `multipart/form-data`.\n        :param async_req bool: execute request asynchronously\n        :param _return_http_data_only: response data without head status code\n                                       and headers\n        :param collection_formats: dict of collection formats for path, query,\n            header, and post parameters.\n        :param _preload_content: if False, original object will\n                                 be returned without reading/decoding response\n                                 data. Default is True.\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :return:\n            If async_req parameter is True,\n            the request will be called asynchronously.\n            The method will return the request thread.\n            If parameter async_req is False or missing,\n            then the method will return the response directly.\n        ';N=_request_timeout;M=_preload_content;L=collection_formats;K=_return_http_data_only;J=auth_settings;I=response_type;H=files;G=post_params;F=header_params;E=query_params;D=path_params;C=method;B=resource_path
		if not async_req:return A.__call_api(B,C,D,E,F,body,G,H,I,J,K,L,M,N)
		else:O=A.pool.apply_async(A.__call_api,(B,C,D,E,F,body,G,H,I,J,K,L,M,N))
		return O
	def parameters_to_tuples(H,params,collection_formats):
		'Get parameters as list of tuples, formatting collections.\n\n        :param params: Parameters as dict or list of two-tuples\n        :param dict collection_formats: Parameter collection formats\n        :return: Parameters as list of tuples, collections formatted\n        ';F=params;B=collection_formats;C=[]
		if B is _A:B={}
		for (A,G) in six.iteritems(F)if isinstance(F,dict)else F:
			if A in B:
				D=B[A]
				if D=='multi':C.extend(((A,B)for B in G))
				else:
					if D=='ssv':E=' '
					elif D=='tsv':E='\t'
					elif D=='pipes':E='|'
					else:E=','
					C.append((A,E.join((str(A)for A in G))))
			else:C.append((A,G))
		return C
	def prepare_post_parameters(L,post_params=_A,files=_A):
		'Builds form parameters.\n\n        :param post_params: Normal form parameters.\n        :param files: File parameters.\n        :return: Form parameters with files.\n        ';D=files;C=post_params;B=[]
		if C:B=C
		if D:
			for (G,A) in six.iteritems(D):
				if not A:continue
				H=A if type(A)is list else[A]
				for I in H:
					with open(I,'rb')as E:F=os.path.basename(E.name);J=E.read();K=mimetypes.guess_type(F)[0]or'application/octet-stream';B.append(tuple([G,tuple([F,J,K])]))
		return B
	def select_header_accept(B,accepts):
		'Returns `Accept` based on an array of accepts provided.\n\n        :param accepts: List of headers.\n        :return: Accept (e.g. application/json).\n        ';A=accepts
		if not A:return
		A=[B.lower()for B in A]
		if _B in A:return _B
		else:return ', '.join(A)
	def select_header_content_type(B,content_types):
		'Returns `Content-Type` based on an array of content_types provided.\n\n        :param content_types: List of content-types.\n        :return: Content-Type (e.g. application/json).\n        ';A=content_types
		if not A:return _B
		A=[B.lower()for B in A]
		if _B in A or'*/*'in A:return _B
		else:return A[0]
	def __deserialize_file(D,response):
		'Deserializes body to file\n\n        Saves response body into a file in a temporary folder,\n        using the filename from the `Content-Disposition` header if provided.\n\n        :param response:  RESTResponse.\n        :return: file path.\n        ';B=response;E,A=tempfile.mkstemp(dir=D.configuration.temp_folder_path);os.close(E);os.remove(A);C=B.getheader('Content-Disposition')
		if C:F=re.search('filename=[\\\'"]?([^\\\'"\\s]+)[\\\'"]?',C).group(1);A=os.path.join(os.path.dirname(A),F)
		with open(A,'wb')as G:G.write(B.data)
		return A
	def __deserialize_primitive(A,data,klass):'Deserializes string to primitive type.\n\n        :param data: str.\n        :param klass: class literal.\n\n        :return: int, long, float, str, bool.\n        ';assert type(data)==klass;return data
	def __deserialize_object(A,value):'Return a original value.\n\n        :return: object.\n        ';return value
	def __deserialize_date(B,string):
		'Deserializes string to date.\n\n        :param string: str.\n        :return: date.\n        ';A=string
		try:from dateutil.parser import parse;return parse(A).date()
		except ImportError:return A
	def __deserialize_datatime(B,string):
		'Deserializes string to datetime.\n\n        The string should be in iso8601 datetime format.\n\n        :param string: str.\n        :return: datetime.\n        ';A=string
		try:from dateutil.parser import parse;return parse(A)
		except ImportError:return A
	def __hasattr(A,object,name):return name in object.__class__.__dict__
	def __deserialize_model(C,data,klass):
		'Deserializes list or dict to model.\n\n        :param data: dict, list.\n        :param klass: class literal.\n        :return: model object.\n        ';J='get_real_child_model';B=klass;A=data
		if not B.swagger_types and not C.__hasattr(B,J):return A
		E={}
		if B.swagger_types is not _A:
			for (F,I) in six.iteritems(B.swagger_types):
				if A is not _A:
					G=B.attribute_map[F]
					if hasattr(A,G):E[F]=C.__deserialize(getattr(A,G),I)
		D=B(**E)
		if C.__hasattr(D,J):
			H=D.get_real_child_model(A)
			if H:D=C.__deserialize(A,H)
		return D