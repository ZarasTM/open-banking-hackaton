'\n    enable:Banking SDK\n\n    Currently enable:Banking SDK consists of [authorization](#auth-api), [account information](#aisp-api) and [payment initiation](#pisp-api) APIs. The same calls and data structures are used for interacting with different banks. In order to use each of the APIs corresponding API instance needs to be created with bank specific settings.  enable:Banking SDK API is based on [STET PSD2 specification](https://www.stet.eu/en/psd2/).  This API intends to provide an interface for Third Party Providers (TPP) for accessing Account Servicing Payment Service Providers (ASPSP, i.e. banks).  TPP may act as Account Information Service Provider (AISP), Payment Initiation Service Providers (PISP) or both.  The Payment Service User (PSU) is the owner of the accounts held by the ASPSP and gives accreditations to the TPP in order to access his accounts information or initiates payment from these accounts.   # noqa: E501\n\n    API version: 0.3.0\n    Contact: hello@enablebanking.com\n    Generated by enable:Banking SDK generator using Swagger Codegen project\n'
_F='creditor_account'
_E='creditor_agent'
_D='is_trusted'
_C='creditor'
_B='id'
_A=None
import pprint,re,six
from enablebanking.models.account_identification import AccountIdentification
from enablebanking.models.financial_institution_identification import FinancialInstitutionIdentification
from enablebanking.models.party_identification import PartyIdentification
class Beneficiary:
	'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    ';'\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    ';swagger_types={_B:'str',_D:'bool',_E:'FinancialInstitutionIdentification',_C:'PartyIdentification',_F:'AccountIdentification'};attribute_map={_B:_B,_D:'isTrusted',_E:'creditorAgent',_C:_C,_F:'creditorAccount'}
	def __init__(A,id=_A,is_trusted=_A,creditor_agent=_A,creditor=_A,creditor_account=_A):
		'Beneficiary - a model defined in Swagger';D=creditor;C=creditor_agent;B=is_trusted;A._id=_A;A._is_trusted=_A;A._creditor_agent=_A;A._creditor=_A;A._creditor_account=_A;A.discriminator=_A
		if id is not _A:A.id=id
		if B is not _A:A.is_trusted=B
		if C is not _A:A.creditor_agent=C
		if D is not _A:A.creditor=D
		A.creditor_account=creditor_account
	@property
	def id(self):'Gets the id of this Beneficiary.  # noqa: E501\n\n        Id of the beneficiary  # noqa: E501\n\n        :return: The id of this Beneficiary.  # noqa: E501\n        :rtype: str\n        ';return self._id
	@id.setter
	def id(self,id):
		'Sets the id of this Beneficiary.\n\n        Id of the beneficiary  # noqa: E501\n\n        :param id: The id of this Beneficiary.  # noqa: E501\n        :type: str\n        '
		if id is not _A and not re.search("^([a-zA-Z0-9 \\/\\-?:\\()\\.,']{1,40})$",id):raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^([a-zA-Z0-9 \\/\\\\-?:\\\\()\\\\.,']{1,40})$/`")
		self._id=id
	@property
	def is_trusted(self):'Gets the is_trusted of this Beneficiary.  # noqa: E501\n\n        The ASPSP having not implemented the trusted beneficiaries list must not set this flag. Otherwise, the ASPSP indicates whether or not the beneficiary has been registered by the PSU within the trusted beneficiaries list. - true: the beneficiary is actually a trusted beneficiary (when set by ASPSP) - false: the beneficiary is not a trusted beneficiary The PISP may set this flag to "true" to indicate that the PSU considers the beneficiary as trusted and to be inserted within the trusted beneficiaries list, as far as this feature was implemented by the ASPSP. - true: the beneficiary should be registered as a trusted beneficiary (when set by PISP)   # noqa: E501\n\n        :return: The is_trusted of this Beneficiary.  # noqa: E501\n        :rtype: bool\n        ';return self._is_trusted
	@is_trusted.setter
	def is_trusted(self,is_trusted):'Sets the is_trusted of this Beneficiary.\n\n        The ASPSP having not implemented the trusted beneficiaries list must not set this flag. Otherwise, the ASPSP indicates whether or not the beneficiary has been registered by the PSU within the trusted beneficiaries list. - true: the beneficiary is actually a trusted beneficiary (when set by ASPSP) - false: the beneficiary is not a trusted beneficiary The PISP may set this flag to "true" to indicate that the PSU considers the beneficiary as trusted and to be inserted within the trusted beneficiaries list, as far as this feature was implemented by the ASPSP. - true: the beneficiary should be registered as a trusted beneficiary (when set by PISP)   # noqa: E501\n\n        :param is_trusted: The is_trusted of this Beneficiary.  # noqa: E501\n        :type: bool\n        ';self._is_trusted=is_trusted
	@property
	def creditor_agent(self):'Gets the creditor_agent of this Beneficiary.  # noqa: E501\n\n\n        :return: The creditor_agent of this Beneficiary.  # noqa: E501\n        :rtype: FinancialInstitutionIdentification\n        ';return self._creditor_agent
	@creditor_agent.setter
	def creditor_agent(self,creditor_agent):'Sets the creditor_agent of this Beneficiary.\n\n\n        :param creditor_agent: The creditor_agent of this Beneficiary.  # noqa: E501\n        :type: FinancialInstitutionIdentification\n        ';self._creditor_agent=creditor_agent
	@property
	def creditor(self):'Gets the creditor of this Beneficiary.  # noqa: E501\n\n\n        :return: The creditor of this Beneficiary.  # noqa: E501\n        :rtype: PartyIdentification\n        ';return self._creditor
	@creditor.setter
	def creditor(self,creditor):'Sets the creditor of this Beneficiary.\n\n\n        :param creditor: The creditor of this Beneficiary.  # noqa: E501\n        :type: PartyIdentification\n        ';self._creditor=creditor
	@property
	def creditor_account(self):'Gets the creditor_account of this Beneficiary.  # noqa: E501\n\n\n        :return: The creditor_account of this Beneficiary.  # noqa: E501\n        :rtype: AccountIdentification\n        ';return self._creditor_account
	@creditor_account.setter
	def creditor_account(self,creditor_account):
		'Sets the creditor_account of this Beneficiary.\n\n\n        :param creditor_account: The creditor_account of this Beneficiary.  # noqa: E501\n        :type: AccountIdentification\n        ';A=creditor_account
		if A is _A:raise ValueError('Invalid value for `creditor_account`, must not be `None`')
		self._creditor_account=A
	def to_dict(D):
		'Returns the model properties as a dict';E='to_dict';B={}
		for (C,G) in six.iteritems(D.swagger_types):
			A=getattr(D,C)
			if isinstance(A,list):B[C]=list(map(lambda x:x.to_dict()if hasattr(x,E)else x,A))
			elif hasattr(A,E):B[C]=A.to_dict()
			elif isinstance(A,dict):B[C]=dict(map(lambda item:(item[0],item[1].to_dict())if hasattr(item[1],E)else item,A.items()))
			else:B[C]=A
		if issubclass(Beneficiary,dict):
			for (F,A) in D.items():B[F]=A
		return B
	def to_str(A):'Returns the string representation of the model';return pprint.pformat(A.to_dict())
	def __repr__(A):'For `print` and `pprint`';return A.to_str()
	def __eq__(B,other):
		'Returns true if both objects are equal';A=other
		if not isinstance(A,Beneficiary):return False
		return B.__dict__==A.__dict__
	def __ne__(A,other):'Returns true if both objects are not equal';return not A==other